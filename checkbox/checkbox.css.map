{"version":3,"sources":["checkbox/checkbox.scss","core/style/_variables.scss","core/style/_elevation.scss","checkbox/checkbox.css","core/style/_checkbox-common.scss"],"names":[],"mappings":"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","file":"checkbox.css","sourcesContent":["@import '../core/theming/theming';\n@import '../core/style/elevation';\n@import '../core/style/checkbox-common';\n@import '../core/ripple/ripple';\n\n// Manual calculation done on SVG\n$_mat-checkbox-mark-path-length: 22.910259;\n$_mat-checkbox-indeterminate-checked-easing-function: cubic-bezier(0.14, 0, 0, 1);\n\n// The ripple size of the checkbox\n$_mat-checkbox-ripple-size: 15px;\n\n// The amount of spacing between the checkbox and its label.\n$_mat-checkbox-item-spacing: $mat-toggle-padding;\n\n// The width of the line used to draw the checkmark / mixedmark.\n$_mat-checkbox-mark-stroke-size: 2 / 15 * $mat-checkbox-size !default;\n\n\n// Fades in the background of the checkbox when it goes from unchecked -> {checked,indeterminate}.\n@keyframes mat-checkbox-fade-in-background {\n  0% {\n    opacity: 0;\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n// Fades out the background of the checkbox when it goes from {checked,indeterminate} -> unchecked.\n@keyframes mat-checkbox-fade-out-background {\n  0%, 50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n// \"Draws\" in the checkmark when the checkbox goes from unchecked -> checked.\n@keyframes mat-checkbox-unchecked-checked-checkmark-path {\n  0%, 50% {\n    stroke-dashoffset: $_mat-checkbox-mark-path-length;\n  }\n\n  50% {\n    animation-timing-function: $mat-linear-out-slow-in-timing-function;\n  }\n\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n// Horizontally expands the mixedmark when the checkbox goes from unchecked -> indeterminate.\n@keyframes mat-checkbox-unchecked-indeterminate-mixedmark {\n  0%, 68.2% {\n    transform: scaleX(0);\n  }\n\n  68.2% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n  }\n\n  100% {\n    transform: scaleX(1);\n  }\n}\n\n// \"Erases\" the checkmark when the checkbox goes from checked -> unchecked.\n@keyframes mat-checkbox-checked-unchecked-checkmark-path {\n  from {\n    animation-timing-function: $mat-fast-out-linear-in-timing-function;\n    stroke-dashoffset: 0;\n  }\n\n  to {\n    stroke-dashoffset: $_mat-checkbox-mark-path-length * -1;\n  }\n}\n\n\n// Rotates and fades out the checkmark when the checkbox goes from checked -> indeterminate. This\n// animation helps provide the illusion of the checkmark \"morphing\" into the mixedmark.\n@keyframes mat-checkbox-checked-indeterminate-checkmark {\n  from {\n    animation-timing-function: $mat-linear-out-slow-in-timing-function;\n    opacity: 1;\n    transform: rotate(0deg);\n  }\n\n  to {\n    opacity: 0;\n    transform: rotate(45deg);\n  }\n}\n\n// Rotates and fades the checkmark back into position when the checkbox goes from indeterminate ->\n// checked. This animation helps provide the illusion that the mixedmark is \"morphing\" into the\n// checkmark.\n@keyframes mat-checkbox-indeterminate-checked-checkmark {\n  from {\n    animation-timing-function: $_mat-checkbox-indeterminate-checked-easing-function;\n    opacity: 0;\n    transform: rotate(45deg);\n  }\n\n  to {\n    opacity: 1;\n    transform: rotate(360deg);\n  }\n}\n\n// Rotates and fades in the mixedmark when the checkbox goes from checked -> indeterminate. This\n// animation, similar to mat-checkbox-checked-indeterminate-checkmark, helps provide an illusion\n// of \"morphing\" from checkmark -> mixedmark.\n@keyframes mat-checkbox-checked-indeterminate-mixedmark {\n  from {\n    animation-timing-function: $mat-linear-out-slow-in-timing-function;\n    opacity: 0;\n    transform: rotate(-45deg);\n  }\n\n  to {\n    opacity: 1;\n    transform: rotate(0deg);\n  }\n}\n\n// Rotates and fades out the mixedmark when the checkbox goes from indeterminate -> checked. This\n// animation, similar to mat-checkbox-indeterminate-checked-checkmark, helps provide an illusion\n// of \"morphing\" from mixedmark -> checkmark.\n@keyframes mat-checkbox-indeterminate-checked-mixedmark {\n  from {\n    animation-timing-function: $_mat-checkbox-indeterminate-checked-easing-function;\n    opacity: 1;\n    transform: rotate(0deg);\n  }\n\n  to {\n    opacity: 0;\n    transform: rotate(315deg);\n  }\n}\n\n\n// Horizontally collapses and fades out the mixedmark when the checkbox goes from indeterminate ->\n// unchecked.\n@keyframes mat-checkbox-indeterminate-unchecked-mixedmark {\n  0% {\n    animation-timing-function: linear;\n    opacity: 1;\n    transform: scaleX(1);\n  }\n\n  32.8%, 100% {\n    opacity: 0;\n    transform: scaleX(0);\n  }\n}\n\n// Applied to elements that cover the checkbox's entire inner container.\n%mat-checkbox-cover-element {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n// Applied to elements that are considered \"marks\" within the checkbox, e.g. the checkmark and\n// the mixedmark.\n%mat-checkbox-mark {\n  $width-padding-inset: 2 * $mat-checkbox-border-width;\n  width: calc(100% - #{$width-padding-inset});\n}\n\n// Applied to elements that appear to make up the outer box of the checkmark, such as the frame\n// that contains the border and the actual background element that contains the marks.\n%mat-checkbox-outer-box {\n  @extend %mat-checkbox-cover-element;\n  border-radius: 2px;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n\n.mat-checkbox {\n  font-family: $mat-font-family;\n\n  // Animation\n  transition: background $swift-ease-out-duration $swift-ease-out-timing-function,\n              mat-elevation-transition-property-value();\n}\n\n.mat-checkbox-label {\n  cursor: pointer;\n}\n\n.mat-checkbox-layout {\n  // `cursor: inherit` ensures that the wrapper element gets the same cursor as the mat-checkbox\n  // (e.g. pointer by default, regular when disabled), instead of the browser default.\n  cursor: inherit;\n  align-items: baseline;\n  vertical-align: middle;\n  display: inline-flex;\n}\n\n.mat-checkbox-inner-container {\n  display: inline-block;\n  height: $mat-checkbox-size;\n  line-height: 0;\n  margin: auto;\n  margin-right: $_mat-checkbox-item-spacing;\n  order: 0;\n  position: relative;\n  vertical-align: middle;\n  white-space: nowrap;\n  width: $mat-checkbox-size;\n  flex-shrink: 0;\n\n  [dir='rtl'] & {\n    margin: {\n      left: $_mat-checkbox-item-spacing;\n      right: auto;\n    }\n  }\n}\n\n// TODO(kara): Remove this style when fixing vertical baseline\n.mat-checkbox-layout .mat-checkbox-label {\n  line-height: 24px;\n}\n\n.mat-checkbox-frame {\n  @extend %mat-checkbox-outer-box;\n\n  background-color: transparent;\n  transition:\n      border-color $mat-checkbox-transition-duration $mat-linear-out-slow-in-timing-function;\n  border: {\n    width: $mat-checkbox-border-width;\n    style: solid;\n  }\n}\n\n.mat-checkbox-background {\n  @extend %mat-checkbox-outer-box;\n\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  transition: background-color $mat-checkbox-transition-duration\n                  $mat-linear-out-slow-in-timing-function,\n              opacity $mat-checkbox-transition-duration $mat-linear-out-slow-in-timing-function;\n}\n\n.mat-checkbox-checkmark {\n  @extend %mat-checkbox-cover-element;\n  @extend %mat-checkbox-mark;\n\n  width: 100%;\n}\n\n.mat-checkbox-checkmark-path {\n  stroke: {\n    dashoffset: $_mat-checkbox-mark-path-length;\n    dasharray: $_mat-checkbox-mark-path-length;\n    width: $_mat-checkbox-mark-stroke-size;\n  }\n}\n\n.mat-checkbox-mixedmark {\n  @extend %mat-checkbox-mark;\n\n  height: floor($_mat-checkbox-mark-stroke-size);\n  opacity: 0;\n  transform: scaleX(0) rotate(0deg);\n}\n\n.mat-checkbox-label-before {\n  .mat-checkbox-inner-container {\n    order: 1;\n    margin: {\n      left: $_mat-checkbox-item-spacing;\n      right: auto;\n    }\n\n    [dir='rtl'] & {\n      margin: {\n        left: auto;\n        right: $_mat-checkbox-item-spacing;\n      }\n    }\n  }\n}\n\n.mat-checkbox-checked {\n  .mat-checkbox-checkmark {\n    opacity: 1;\n  }\n\n  .mat-checkbox-checkmark-path {\n    stroke-dashoffset: 0;\n  }\n\n  .mat-checkbox-mixedmark {\n    transform: scaleX(1) rotate(-45deg);\n  }\n}\n\n.mat-checkbox-indeterminate {\n  .mat-checkbox-checkmark {\n    opacity: 0;\n    transform: rotate(45deg);\n  }\n\n  .mat-checkbox-checkmark-path {\n    stroke-dashoffset: 0;\n  }\n\n  .mat-checkbox-mixedmark {\n    opacity: 1;\n    transform: scaleX(1) rotate(0deg);\n  }\n}\n\n\n.mat-checkbox-unchecked {\n  .mat-checkbox-background {\n    background-color: transparent;\n  }\n}\n\n.mat-checkbox-disabled {\n  cursor: default;\n}\n\n.mat-checkbox-anim {\n  $indeterminate-change-duration: 500ms;\n\n  &-unchecked-checked {\n    .mat-checkbox-background {\n      animation: $mat-checkbox-transition-duration * 2 linear 0ms mat-checkbox-fade-in-background;\n    }\n\n    .mat-checkbox-checkmark-path {\n      // Instead of delaying the animation, we simply multiply its length by 2 and begin the\n      // animation at 50% in order to prevent a flash of styles applied to a checked checkmark\n      // as the background is fading in before the animation begins.\n      animation:\n        $mat-checkbox-transition-duration * 2 linear 0ms mat-checkbox-unchecked-checked-checkmark-path;\n    }\n  }\n\n  &-unchecked-indeterminate {\n    .mat-checkbox-background {\n      animation: $mat-checkbox-transition-duration * 2 linear 0ms mat-checkbox-fade-in-background;\n    }\n\n    .mat-checkbox-mixedmark {\n      animation:\n        $mat-checkbox-transition-duration linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark;\n    }\n  }\n\n  &-checked-unchecked {\n    .mat-checkbox-background {\n      animation: $mat-checkbox-transition-duration * 2 linear 0ms mat-checkbox-fade-out-background;\n    }\n\n    .mat-checkbox-checkmark-path {\n      animation:\n        $mat-checkbox-transition-duration linear 0ms mat-checkbox-checked-unchecked-checkmark-path;\n    }\n  }\n\n  &-checked-indeterminate {\n    .mat-checkbox-checkmark {\n      animation:\n        $mat-checkbox-transition-duration linear 0ms mat-checkbox-checked-indeterminate-checkmark;\n    }\n\n    .mat-checkbox-mixedmark {\n      animation:\n        $mat-checkbox-transition-duration linear 0ms mat-checkbox-checked-indeterminate-mixedmark;\n    }\n  }\n\n  &-indeterminate-checked {\n    .mat-checkbox-checkmark {\n      animation:\n        $indeterminate-change-duration linear 0ms mat-checkbox-indeterminate-checked-checkmark;\n    }\n\n    .mat-checkbox-mixedmark {\n      animation:\n        $indeterminate-change-duration linear 0ms mat-checkbox-indeterminate-checked-mixedmark;\n    }\n  }\n\n  &-indeterminate-unchecked {\n    .mat-checkbox-background {\n      animation: $mat-checkbox-transition-duration * 2 linear 0ms mat-checkbox-fade-out-background;\n    }\n\n    .mat-checkbox-mixedmark {\n      animation:\n        $indeterminate-change-duration * 0.6 linear 0ms\n        mat-checkbox-indeterminate-unchecked-mixedmark;\n    }\n  }\n}\n\n.mat-checkbox-input {\n  // Move the input to the bottom and in the middle.\n  // Visual improvement to properly show browser popups when being required.\n  bottom: 0;\n  left: 50%;\n}\n\n.mat-checkbox-ripple {\n  position: absolute;\n  left: -$_mat-checkbox-ripple-size;\n  top: -$_mat-checkbox-ripple-size;\n  right: -$_mat-checkbox-ripple-size;\n  bottom: -$_mat-checkbox-ripple-size;\n  border-radius: 50%;\n  z-index: 1;\n  pointer-events: none;\n}\n","@import '../typography/typography';\n\n\n// Typography\n$mat-body-font-size-base: rem(1.4) !default;\n$mat-font-family: Roboto, 'Helvetica Neue', sans-serif !default;\n\n// Media queries\n// TODO: Find a way to respect media query ranges.\n// TODO: For example the xs-breakpoint should not interfere with the sm-breakpoint.\n$mat-xsmall: 'max-width: 600px';\n$mat-small: 'max-width: 960px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n\n// Overlay z indices.\n\n// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$cdk-z-index-overlay-container: 1000;\n$cdk-z-index-overlay: 1000;\n$cdk-z-index-overlay-backdrop: 1000;\n\n// Background color for all of the backdrops\n$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.6);\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$mat-toggle-padding: 8px !default;\n// Width and height of input toggles\n$mat-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$mat-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$mat-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$mat-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n","@import 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n$_umbra-color: rgba(black, 0.2);\n$_penumbra-color: rgba(black, 0.14);\n$_ambient-color: rgba(black, 0.12);\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n$_umbra-elevation-map: (\n  0: '0px 0px 0px 0px #{$_umbra-color}',\n  1: '0px 2px 1px -1px #{$_umbra-color}',\n  2: '0px 3px 1px -2px #{$_umbra-color}',\n  3: '0px 3px 3px -2px #{$_umbra-color}',\n  4: '0px 2px 4px -1px #{$_umbra-color}',\n  5: '0px 3px 5px -1px #{$_umbra-color}',\n  6: '0px 3px 5px -1px #{$_umbra-color}',\n  7: '0px 4px 5px -2px #{$_umbra-color}',\n  8: '0px 5px 5px -3px #{$_umbra-color}',\n  9: '0px 5px 6px -3px #{$_umbra-color}',\n  10: '0px 6px 6px -3px #{$_umbra-color}',\n  11: '0px 6px 7px -4px #{$_umbra-color}',\n  12: '0px 7px 8px -4px #{$_umbra-color}',\n  13: '0px 7px 8px -4px #{$_umbra-color}',\n  14: '0px 7px 9px -4px #{$_umbra-color}',\n  15: '0px 8px 9px -5px #{$_umbra-color}',\n  16: '0px 8px 10px -5px #{$_umbra-color}',\n  17: '0px 8px 11px -5px #{$_umbra-color}',\n  18: '0px 9px 11px -5px #{$_umbra-color}',\n  19: '0px 9px 12px -6px #{$_umbra-color}',\n  20: '0px 10px 13px -6px #{$_umbra-color}',\n  21: '0px 10px 13px -6px #{$_umbra-color}',\n  22: '0px 10px 14px -6px #{$_umbra-color}',\n  23: '0px 11px 14px -7px #{$_umbra-color}',\n  24: '0px 11px 15px -7px #{$_umbra-color}'\n);\n\n$_penumbra-elevation-map: (\n  0: '0px 0px 0px 0px #{$_penumbra-color}',\n  1: '0px 1px 1px 0px #{$_penumbra-color}',\n  2: '0px 2px 2px 0px #{$_penumbra-color}',\n  3: '0px 3px 4px 0px #{$_penumbra-color}',\n  4: '0px 4px 5px 0px #{$_penumbra-color}',\n  5: '0px 5px 8px 0px #{$_penumbra-color}',\n  6: '0px 6px 10px 0px #{$_penumbra-color}',\n  7: '0px 7px 10px 1px #{$_penumbra-color}',\n  8: '0px 8px 10px 1px #{$_penumbra-color}',\n  9: '0px 9px 12px 1px #{$_penumbra-color}',\n  10: '0px 10px 14px 1px #{$_penumbra-color}',\n  11: '0px 11px 15px 1px #{$_penumbra-color}',\n  12: '0px 12px 17px 2px #{$_penumbra-color}',\n  13: '0px 13px 19px 2px #{$_penumbra-color}',\n  14: '0px 14px 21px 2px #{$_penumbra-color}',\n  15: '0px 15px 22px 2px #{$_penumbra-color}',\n  16: '0px 16px 24px 2px #{$_penumbra-color}',\n  17: '0px 17px 26px 2px #{$_penumbra-color}',\n  18: '0px 18px 28px 2px #{$_penumbra-color}',\n  19: '0px 19px 29px 2px #{$_penumbra-color}',\n  20: '0px 20px 31px 3px #{$_penumbra-color}',\n  21: '0px 21px 33px 3px #{$_penumbra-color}',\n  22: '0px 22px 35px 3px #{$_penumbra-color}',\n  23: '0px 23px 36px 3px #{$_penumbra-color}',\n  24: '0px 24px 38px 3px #{$_penumbra-color}'\n);\n\n$_ambient-elevation-map: (\n  0: '0px 0px 0px 0px #{$_ambient-color}',\n  1: '0px 1px 3px 0px #{$_ambient-color}',\n  2: '0px 1px 5px 0px #{$_ambient-color}',\n  3: '0px 1px 8px 0px #{$_ambient-color}',\n  4: '0px 1px 10px 0px #{$_ambient-color}',\n  5: '0px 1px 14px 0px #{$_ambient-color}',\n  6: '0px 1px 18px 0px #{$_ambient-color}',\n  7: '0px 2px 16px 1px #{$_ambient-color}',\n  8: '0px 3px 14px 2px #{$_ambient-color}',\n  9: '0px 3px 16px 2px #{$_ambient-color}',\n  10: '0px 4px 18px 3px #{$_ambient-color}',\n  11: '0px 4px 20px 3px #{$_ambient-color}',\n  12: '0px 5px 22px 4px #{$_ambient-color}',\n  13: '0px 5px 24px 4px #{$_ambient-color}',\n  14: '0px 5px 26px 4px #{$_ambient-color}',\n  15: '0px 6px 28px 5px #{$_ambient-color}',\n  16: '0px 6px 30px 5px #{$_ambient-color}',\n  17: '0px 6px 32px 5px #{$_ambient-color}',\n  18: '0px 7px 34px 6px #{$_ambient-color}',\n  19: '0px 7px 36px 6px #{$_ambient-color}',\n  20: '0px 8px 38px 7px #{$_ambient-color}',\n  21: '0px 8px 40px 7px #{$_ambient-color}',\n  22: '0px 8px 42px 7px #{$_ambient-color}',\n  23: '0px 9px 44px 8px #{$_ambient-color}',\n  24: '0px 9px 46px 8px #{$_ambient-color}'\n);\n\n\n// The css property used for elevation. In most cases this should not be changed. It is exposed\n// as a variable for abstraction / easy use when needing to reference the property directly, for\n// example in a will-change rule.\n$mat-elevation-property: box-shadow !default;\n\n// The default duration value for elevation transitions.\n$mat-elevation-transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$mat-elevation-transition-timing-function: $mat-fast-out-slow-in-timing-function;\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin mat-elevation($zValue) {\n  @if type-of($zValue) != number or not unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  #{$mat-elevation-property}: #{map-get($_umbra-elevation-map, $zValue)},\n                             #{map-get($_penumbra-elevation-map, $zValue)},\n                             #{map-get($_ambient-elevation-map, $zValue)};\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n//   will-change: $mat-elevation-property, opacity;\n// }\n@function mat-elevation-transition-property-value(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  @return #{$mat-elevation-property} #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin mat-elevation-transition(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  transition: mat-elevation-transition-property-value($duration, $easing);\n  will-change: $mat-elevation-property;\n}\n",null,"@import './variables';\n\n// The width/height of the checkbox element.\n$mat-checkbox-size: $mat-toggle-size !default;\n\n// The width of the checkbox border shown when the checkbox is unchecked.\n$mat-checkbox-border-width: 2px;\n\n// The base duration used for the majority of transitions for the checkbox.\n$mat-checkbox-transition-duration: 90ms;\n"]}