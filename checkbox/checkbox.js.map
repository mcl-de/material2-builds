{"version":3,"sources":["../../../../src/lib/checkbox/checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourceRoot":"","sourcesContent":["import {\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {Subscription} from 'rxjs/Subscription';\nimport {\n  MdRipple,\n  RippleRef,\n  FocusOriginMonitor,\n} from '../core';\n\n\n/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */\nlet /** @type {?} */ nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n  /** The source MdCheckbox of the event. */\n  source: MdCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n   ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n   ariaLabelledby: string = null;\n\n  /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */\n   id: string = `md-checkbox-${++nextId}`;\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n   labelPosition: 'before' | 'after' = 'after';\nprivate _disabled: boolean = false;\n/**\n * Whether the checkbox is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Tabindex value that is passed to the underlying input element. */\n   tabIndex: number = 0;\n\n  /** Name value will be applied to the input element if present */\n   name: string = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n   change: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n   indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n   value: string ;\n\n  /** The native `<input type=\"checkbox\"> element */\n   _inputElement: ElementRef;\n\n   _ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _color: string;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\nprivate _focusedRipple: RippleRef;\nprivate _focusedSubscription: Subscription;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.color = 'accent';\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusedSubscription = this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => {\n        if (!this._focusedRipple && (focusOrigin === 'keyboard' || focusOrigin === 'program')) {\n          this._focusedRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n      });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked. Note that setting `checked` will immediately set\n * `indeterminate` to false.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to\n * false. This differs from the web platform in that indeterminate state on native\n * checkboxes is only remove when the user manually checks the checkbox (rather than setting the\n * `checked` property programmatically). However, we feel that this behavior is more accommodating\n * to the way consumers would envision using this component.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Informs the component when we lose focus in order to style accordingly\n * @return {?}\n */\n_onInputBlur() {\n    this._removeFocusedRipple();\n    this.onTouched();\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusedRipple();\n\n    if (!this.disabled) {\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focused state ripple.\n * @return {?}\n */\nprivate _removeFocusedRipple(): void {\n    if (this._focusedRipple) {\n      this._focusedRipple.fadeOut();\n      this._focusedRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    '[class.mat-checkbox]': 'true',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/** @type {?} */\nMdCheckbox.prototype._disabled;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/** @type {?} */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._color;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusedRipple;\n/**\n * Reference to the focus origin monitor subscription.\n * @type {?}\n */\nMdCheckbox.prototype._focusedSubscription;\n/** @type {?} */\nMdCheckbox.prototype._renderer;\n/** @type {?} */\nMdCheckbox.prototype._elementRef;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}