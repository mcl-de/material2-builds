{"version":3,"sources":["../../../../src/lib/sidenav/sidenav.ts"],"names":[],"mappings":"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","file":"sidenav.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport {Dir, MdError, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\n/**\n * Exception thrown when two MdSidenav are matching the same side.\n */\nexport class MdDuplicatedSidenavError extends MdError {\n/**\n * @param {?} align\n */\nconstructor(align: string) {\n    super(`A sidenav was already declared for 'align=\"${align}\"'`);\n  }\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n\n  /** Mode of the sidenav; whether 'over' or 'side'. */\n   mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n\n  /** Whether the sidenav is opened. */\n  _opened: boolean = false;\n\n  /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */\n   onOpenStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully opened. */\n   onOpen = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */\n   onCloseStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully closed. */\n   onClose = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav alignment changes. */\n   onAlignChanged = new EventEmitter<void>();\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _renderer\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    this.onOpen.subscribe(() => {\n      this._elementFocusedBeforeSidenavWasOpened = document.activeElement as HTMLElement;\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._renderer.invokeElementMethod(this._elementFocusedBeforeSidenavWasOpened, 'focus');\n      } else {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'blur');\n      }\n\n      this._elementFocusedBeforeSidenavWasOpened = null;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    '[class.mat-sidenav]': 'true',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; whether 'over' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._renderer;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n\n  /** Event emitted when the sidenav backdrop is clicked. */\n   backdropClick = new EventEmitter<void>();\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n\n  /** Whether to enable open/close trantions. */\n  _enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(sidenav, true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(sidenav, false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} sidenav\n * @param {?} bool\n * @return {?}\n */\nprivate _setContainerClass(sidenav: MdSidenav, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throw new MdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throw new MdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    '[class.mat-sidenav-container]': 'true',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}