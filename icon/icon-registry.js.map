{"version":3,"sources":["../../../../src/lib/icon/icon-registry.ts"],"names":[],"mappings":"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","file":"icon-registry.js","sourceRoot":"","sourcesContent":["import {Injectable, SecurityContext} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {MdError} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/finally';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/observable/throw';\n/**\n * Exception thrown when attempting to load an icon with a name that cannot be found.\n * \\@docs-private\n */\nexport class MdIconNameNotFoundError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n    super(`Unable to find icon with the name \"${iconName}\"`);\n  }\n}\n/**\n * Exception thrown when attempting to load SVG content that does not contain the expected\n * <svg> tag.\n * \\@docs-private\n */\nexport class MdIconSvgTagNotFoundError extends MdError {\nconstructor() {\n    super('<svg> tag not found');\n  }\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Returns the cache key to use for an icon namespace and name.\n */\nconst iconKey = (namespace: string, name: string) => namespace + ':' + name;\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(private _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    if (this._iconSetConfigs.has(namespace)) {\n      this._iconSetConfigs.get(namespace).push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (this._cachedIconsByUrl.has(url)) {\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\n        .map(svg => cloneSvg(svg));\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an MdIconNameNotFoundError.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    if (this._svgIconConfigs.has(key)) {\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n    }\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return Observable.throw(new MdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return Observable.of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config)\n          .do(svg => config.svgElement = svg)\n          .map(svg => cloneSvg(svg));\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * MdIconNameNotFoundError if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return Observable.of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\n        .map(iconSetConfig =>\n            this._loadSvgIconSetFromConfig(iconSetConfig)\n                .catch((err: any, caught: Observable<SVGElement>): Observable<SVGElement> => {\n                  let /** @type {?} */ url =\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                  // Swallow errors fetching individual URLs so the combined Observable won't\n                  // necessarily fail.\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\n                  return Observable.of(null);\n                })\n                .do(svg => {\n                  // Cache SVG element.\n                  if (svg) {\n                    iconSetConfig.svgElement = svg;\n                  }\n                }));\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return Observable.forkJoin(iconSetFetchRequests)\n        .map((ignoredResults: any) => {\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n          if (!foundIcon) {\n            throw new MdIconNameNotFoundError(name);\n          }\n          return foundIcon;\n        });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url)\n        .map(svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n    if (!iconNode) {\n      return null;\n    }\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() == 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw new MdIconSvgTagNotFoundError();\n    }\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    if (this._inProgressUrlFetches.has(url)) {\n      return this._inProgressUrlFetches.get(url);\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\n        .map(response => response.text())\n        .finally(() => {\n          this._inProgressUrlFetches.delete(url);\n        })\n        .share()));\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}