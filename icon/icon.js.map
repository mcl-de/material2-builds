{"version":3,"sources":["../../../../src/lib/icon/icon.ts"],"names":[],"mappings":"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","file":"icon.js","sourceRoot":"","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChange,\n  ViewEncapsulation,\n  AfterViewChecked,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdError} from '../core';\nimport {MdIconRegistry, MdIconNameNotFoundError} from './icon-registry';\n/**\n * Exception thrown when an invalid icon name is passed to an md-icon component.\n */\nexport class MdIconInvalidNameError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n      super(`Invalid icon name: \"${iconName}\"`);\n  }\n}\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon implements OnChanges, OnInit, AfterViewChecked {\nprivate _color: string;\n\n  /** Name of the icon in the SVG icon set. */\n   svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n   fontSet: string;\n\n  /** Name of an icon within a font set. */\n   fontIcon: string;\n\n  /** Alt label to be used for accessibility. */\n   alt: string;\n\n  /** Screenreader label for the icon. */\n   hostAriaLabel: string = '';\n/**\n * Color of the icon.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\nprivate _previousAriaLabel: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _mdIconRegistry\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _mdIconRegistry: MdIconRegistry) { }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws MdIconInvalidNameError)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw new MdIconInvalidNameError(iconName);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: MdIconNameNotFoundError) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n    // Update aria label here because it may depend on the projected text content.\n    // (e.g. <md-icon>home</md-icon> should use 'home').\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nprivate _updateAriaLabel() {\n      const /** @type {?} */ ariaLabel = this._getAriaLabel();\n      if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n        this._previousAriaLabel = ariaLabel;\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n      }\n  }\n/**\n * @return {?}\n */\nprivate _getAriaLabel() {\n    // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n    // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n    // the text content of the directive.\n    const /** @type {?} */ label =\n        this.hostAriaLabel ||\n        this.alt ||\n        this.fontIcon ||\n        this._splitIconName(this.svgIcon)[1];\n    if (label) {\n      return label;\n    }\n    // The \"content\" of an SVG icon is not a useful label.\n    if (this._usingFontIcon()) {\n      const /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n      if (text) {\n        return text;\n      }\n    }\n    // TODO: Warn here in dev mode.\n    return null;\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.projectNodes(layoutElement, [svg]);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.setElementClass(elem, this._previousFontSetClass, false);\n      }\n      if (fontSetClass) {\n        this._renderer.setElementClass(elem, fontSetClass, true);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.setElementClass(elem, this._previousFontIconClass, false);\n      }\n      if (this.fontIcon) {\n        this._renderer.setElementClass(elem, this.fontIcon, true);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  host: {\n    'role': 'img',\n    '[class.mat-icon]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: MdIconRegistry, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n'alt': [{ type: Input },],\n'hostAriaLabel': [{ type: Input, args: ['aria-label', ] },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/** @type {?} */\nMdIcon.prototype._color;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/**\n * Alt label to be used for accessibility.\n * @type {?}\n */\nMdIcon.prototype.alt;\n/**\n * Screenreader label for the icon.\n * @type {?}\n */\nMdIcon.prototype.hostAriaLabel;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._previousAriaLabel;\n/** @type {?} */\nMdIcon.prototype._elementRef;\n/** @type {?} */\nMdIcon.prototype._renderer;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n};\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], Http, DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}