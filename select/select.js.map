{"version":3,"sources":["../../../../src/lib/select/select.ts"],"names":[],"mappings":"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","file":"select.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {MdSelectDynamicMultipleError, MdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n/**\n * The fixed height of every option element.\n */\nexport const SELECT_OPTION_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED = 5;\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n\n/** Allowed values for the floatPlaceholder option. */\nexport type MdSelectFloatPlaceholderType = 'always' | 'never' | 'auto';\nexport class MdSelect implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * Whether the select is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction.\n */\n_offsetX = 0;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw new MdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): MdSelectFloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: MdSelectFloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: MdSelectFloatPlaceholderType = 'auto';\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n */\nconstructor(private _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\npublic _control: NgControl,\n               tabIndex: string) {\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Ensures the panel opens if activated by the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this.open();\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\n_setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[]): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw new MdSelectNonArrayValueError();\n    }\n\n    if (isArray) {\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else if (!this._selectValue(value)) {\n      this._clearSelection();\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any): MdOption {\n    let /** @type {?} */ correspondingOption = this.options.find(option => option.value === value);\n\n    if (correspondingOption) {\n      correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option);\n      this._selectionModel.select(option);\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @return {?}\n */\nprivate _propagateChanges(): void {\n    let /** @type {?} */ valueToEmit = Array.isArray(this.selected) ?\n      this.selected.map(option => option.value) :\n      this.selected.value;\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    this._offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n\n    if (!this._isRtl()) {\n      this._offsetX *= -1;\n    }\n\n    const /** @type {?} */ panelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      const /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `visibility` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderVisibility(): 'visible'|'hidden' {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        'visible' : 'hidden';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffset(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select]': 'true',\n    '(keydown)': '_handleKeydown($event)',\n    '(blur)': '_onBlur()'\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * Whether the select is disabled.\n * @type {?}\n */\nMdSelect.prototype._disabled;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction.\n * @type {?}\n */\nMdSelect.prototype._offsetX;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._element;\n/** @type {?} */\nMdSelect.prototype._renderer;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}