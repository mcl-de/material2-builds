{"version":3,"sources":["../../../../src/lib/toolbar/toolbar.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,uBAAuB,EACvB,KAAK,EACL,iBAAiB,EACjB,SAAS,EACT,UAAU,EACV,QAAQ,EACT,MAAM,eAAA,CAAgB;AACvB,MAGC;;AAAiC,uBAAA,GAAoC;IAFtE,EAGE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAFvB,QAAQ,EAGE,iCAAA;gBAFV,IAAI,EAGE;oBAFJ,yBAAyB,EAGE,MAAA;iBAF5B;aACF,EAGC,EAAG;CAFJ,CAGC;AAFF;;GAEG;AAEF,2BAAA,GAAA,MAAA,EAAA,CAAC;AAGF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;AAC5B,CAAC;AAED,MARC;IAUD;;;OAGG;IACH,YAVsB,UAAY,EAAoB,QAAU;QAA1C,eAAA,GAAA,UAAA,CAAY;QAAoB,aAAA,GAAA,QAAA,CAAU;IAAS,CAAA;IAYzE;;;OAGG;IACH,IAZG,KAAA;QAaC,MAAM,CAZC,IAAA,CAAK,MAAC,CAAM;IAarB,CAAC;IACH;;;OAGG;IACH,IAfG,KAAA,CAAA,KAAA;QAgBC,IAAI,CAfC,YAAC,CAAY,KAAC,CAAK,CAAC;IAgB3B,CAAC;IACH;;;OAGG;IAjBA,YAAA,CAAA,QAAA;QAmBC,IAAI,CAlBC,gBAAC,CAAgB,IAAC,CAAI,MAAC,EAAO,KAAA,CAAM,CAAC;QAmB1C,IAAI,CAlBC,gBAAC,CAAgB,QAAC,EAAS,IAAA,CAAK,CAAC;QAmBtC,IAAI,CAlBC,MAAC,GAAQ,QAAA,CAAS;IAmBzB,CAAC;IACH;;;;OAIG;IArBA,gBAAA,CAAA,KAAA,EAAA,KAAA;QAuBC,EAAE,CAAC,CAAC,KAtBC,IAAQ,IAAA,IAAQ,KAAA,IAAS,EAAA,CAAG,CAAC,CAAA;YAuBhC,IAAI,CAtBC,QAAC,CAAQ,eAAC,CAAe,IAAC,CAAI,UAAC,CAAU,aAAC,EAAc,OAAA,KAAQ,EAAK,EAAG,KAAA,CAAM,CAAC;QAuBtF,CAAC;IACH,CAAC;;AApBI,oBAAA,GAAoC;IAuB3C,EAtBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAuBvB,QAAQ,EAtBE,MAAA,CAAO,EAAC;gBAuBlB,QAAQ,EAtBE,yBAAA;gBAuBV,WAAW,EAtBE,cAAA;gBAuBb,SAAS,EAtBE,CAAA,aAAE,CAAa;gBAuB1B,IAAI,EAtBE;oBAuBJ,qBAAqB,EAtBE,MAAA;oBAuBvB,MAAM,EAtBE,SAAA;iBAuBT;gBACD,eAAe,EAtBE,uBAAA,CAAwB,MAAC;gBAuB1C,aAAa,EAtBE,iBAAA,CAAkB,IAAC;aAuBnC,EAtBC,EAAG;CAuBJ,CAtBC;AAuBF;;GAEG;AAvBF,wBAAA,GAAA,MAAA;IAyBD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CAAC;AAvBK,wBAAA,GAAyD;IAyBhE,OAAO,EAxBE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAyBzB,CAxBC;AA2BF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;IAC3B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC7B,CAAC","file":"toolbar.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer\n} from '@angular/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {\n    '[class.mat-toolbar-row]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbar {\nprivate _color: string;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private elementRef: ElementRef,\nprivate renderer: Renderer) { }\n/**\n * The color of the toolbar. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this.renderer.setElementClass(this.elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  host: {\n    '[class.mat-toolbar]': 'true',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n};\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n/** @type {?} */\nMdToolbar.propDecorators;\n/** @type {?} */\nMdToolbar.prototype._color;\n/** @type {?} */\nMdToolbar.prototype.elementRef;\n/** @type {?} */\nMdToolbar.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}