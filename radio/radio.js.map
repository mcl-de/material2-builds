{"version":3,"sources":["../../../../src/lib/radio/radio.ts"],"names":[],"mappings":"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","file":"radio.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * Disables all individual radio buttons assigned to this group.\n */\nprivate _disabled: boolean = false;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    '[class.mat-radio-group]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * Disables all individual radio buttons assigned to this group.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype.labelPosition;\n}\n\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton implements OnInit, AfterViewInit, OnDestroy {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-radio-button]': 'true',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._elementRef;\n/** @type {?} */\nMdRadioButton.prototype._renderer;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}