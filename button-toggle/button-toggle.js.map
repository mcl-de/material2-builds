{"version":3,"sources":["../../../../src/lib/button-toggle/button-toggle.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,eAAe,EACf,SAAS,EACT,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,WAAW,EACX,KAAK,EAEL,QAAQ,EACR,MAAM,EAEN,SAAS,EACT,iBAAiB,EACjB,UAAU,GAEX,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAA,iBAAE,EAAuC,MAAA,gBAAA,CAAA;AAEhD,OAAO,EAAA,yBAAE,EAA0B,qBAAA,EAAuB,kBAAA,EAAmB,MAAA,SAAA,CAAA;AAI7E;;;;GAIG;AACH,MAGC,CAAA,MAAA,qCAAA,GAAA;IAFC,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,mBAAmB,CAAC;IAClD,KAAK,EAAA,IAAM;CACZ,CAAC;AAEF,IAAI,gBAAU,CAGV,gBAAA,GAAmB,CAAA,CAAE;AAFzB;;GAEG;AACH,MAEC;CAGA;AAED;IACA;;;OAGG;IACH,oBAAoB,CAAC,SAAS,CAAC,MAAM,CAAC;IACtC;;;OAGG;IACH,oBAAoB,CAAC,SAAS,CAAC,KAAK,CAAC;AACrC,CAAC;AAED;;GAEG;AACH,MAZC;IAYD;QAVU,WAAA,GAAc,IAAA,CAAK;QAGnB,UAAA,GAAgB,0BAAA,gBAA2B,EAAgB,EAAE,CAAE;QAG/D,cAAA,GAAqB,IAAA,CAAK;QAG1B,cAAA,GAAqB,KAAA,CAAM;QAG3B,cAAA,GAA4B,IAAA,CAAK;QAGjC,mBAAA,GAA0B,KAAA,CAAM;QAMhC,kCAAA,GAAsD,CAAA,KAAE,OAAS,CAAA,CAAG;QAF5E,8EAA8E;QAC9E,cAAS,GAIc,QAAM,CAAA,CAAG;QAFhC,mCAAmC;QAEnC,mBAAc,GAI8B,IAAA,CAAK;QA4EzC,YAAA,GAA8C,IAAI,YAAA,EAAkC,CAAG;IA0HjG,CAAC;IAzMD;;OAEG;IACH,eAEG;QADC,IAAI,CAEC,cAAC,GAAgB,IAAA,CAAK;IAD7B,CAAC;IACH;;;OAGG;IACH,IACG,IAAA;QAAC,MAAM,CACC,IAAA,CAAK,KAAC,CAAK;IAApB,CAAC;IACH;;;OAGG;IACH,IAFG,IAAA,CAAA,KAAA;QAGC,IAAI,CAFC,KAAC,GAAO,KAAA,CAAM;QAGnB,IAAI,CAFC,wBAAC,EAAwB,CAAE;IAGlC,CAAC;IACH;;;OAGG;IACH,IAHG,QAAA;QAIC,MAAM,CAHC,IAAA,CAAK,SAAC,CAAS;IAIxB,CAAC;IACH;;;OAGG;IACH,IANG,QAAA,CAAA,KAAA;QAOC,IAAI,CANC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;IAOhD,CAAC;IACH;;;OAGG;IACH,IAPG,QAAA;QAQC,MAAM,CAPC,IAAA,CAAK,SAAC,CAAS;IAQxB,CAAC;IACH;;;OAGG;IACH,IAVG,QAAA,CAAA,KAAA;QAWC,IAAI,CAVC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;IAWhD,CAAC;IACH;;;OAGG;IACH,IAXG,KAAA;QAYC,MAAM,CAXC,IAAA,CAAK,MAAC,CAAM;IAYrB,CAAC;IACH;;;OAGG;IACH,IAdG,KAAA,CAAA,QAAA;QAeC,EAAE,CAAC,CAAC,IAdC,CAAI,MAAC,IAAS,QAAA,CAAS,CAAC,CAAA;YAe3B,IAAI,CAdC,MAAC,GAAQ,QAAA,CAAS;YAgBvB,IAAI,CAdC,oCAAC,EAAoC,CAAE;YAgB5C,kEAAkE;YAClE,+DAA+D;YAC/D,EAAE,CAAC,CAAC,IAdC,CAAI,cAAC,CAAc,CAAC,CAAA;gBAevB,IAAI,CAdC,gBAAC,EAAgB,CAAE;YAe1B,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IAfG,QAAA;QAgBC,MAAM,CAfC,IAAA,CAAK,SAAC,CAAS;IAgBxB,CAAC;IACH;;;OAGG;IACH,IAlBG,QAAA,CAAA,QAAA;QAmBC,IAAI,CAlBC,SAAC,GAAW,QAAA,CAAS;QAmB1B,IAAI,CAlBC,KAAC,GAAO,QAAA,GAAW,QAAA,CAAS,KAAC,GAAO,IAAA,CAAK;QAoB9C,EAAE,CAAC,CAAC,QAlBC,IAAW,CAAA,QAAE,CAAQ,OAAC,CAAO,CAAC,CAAA;YAmBjC,QAAQ,CAlBC,OAAC,GAAS,IAAA,CAAK;QAmB1B,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IApBI,MAAA;QAqBA,MAAM,CApBC,IAAA,CAAK,OAAC,CAAO,YAAC,EAAY,CAAE;IAqBrC,CAAC;IAEH;;OAEG;IArBA,wBAAA;QAuBC,EAAE,CAAC,CAAC,IAtBC,CAAI,cAAC,CAAc,CAAC,CAAA;YAuBvB,IAAI,CAtBC,cAAC,CAAc,OAAC,CAAO,CAAC,MAAC;gBAuB5B,MAAM,CAtBC,IAAC,GAAM,IAAA,CAAK,KAAC,CAAK;YAuB3B,CAAC,CAtBC,CAAC;QAuBL,CAAC;IACH,CAAC;IACH;;OAEG;IAtBA,oCAAA;QAwBC,IAAI,gBAAgB,CAvBhB,iBAAA,GAAoB,IAAA,CAAK,SAAC,IAAY,IAAA,IAAQ,IAAA,CAAK,SAAC,CAAS,KAAC,IAAQ,IAAA,CAAK,MAAC,CAAM;QAyBtF,EAAE,CAAC,CAAC,IAvBC,CAAI,cAAC,IAAiB,IAAA,IAAQ,CAAA,iBAAE,CAAiB,CAAC,CAAA;YAwBrD,IAAI,gBAAgB,CAvBhB,oBAAA,GAAuB,IAAA,CAAK,cAAC,CAAc,MAAC,CAwB5C,YAAY,IAvBI,YAAA,CAAa,KAAC,IAAQ,IAAA,CAAK,MAAC,CAAM,CAAC,CAAC,CAAC,CAAC;YAyB1D,EAAE,CAAC,CAAC,oBAvBC,CAAoB,CAAC,CAAA;gBAwBxB,IAAI,CAvBC,QAAC,GAAU,oBAAA,CAAqB;YAwBvC,CAAC;YAvBC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,IAAQ,IAAA,CAAK,CAAC,CAAA;gBAwB7B,IAAI,CAvBC,QAAC,GAAU,IAAA,CAAK;gBAwBrB,IAAI,CAvBC,cAAC,CAAc,OAAC,CAAO,YAAC;oBAwB3B,YAAY,CAvBC,OAAC,GAAS,KAAA,CAAM;gBAwB/B,CAAC,CAvBC,CAAC;YAwBL,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IAxBA,gBAAA;QA0BC,IAAI,gBAAgB,CAzBhB,KAAA,GAAQ,IAAI,oBAAA,EAAqB,CAAE;QA0BvC,KAAK,CAzBC,MAAC,GAAQ,IAAA,CAAK,SAAC,CAAS;QA0B9B,KAAK,CAzBC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM;QA0B1B,IAAI,CAzBC,6BAAC,CAA6B,KAAC,CAAK,KAAC,CAAK,CAAC;QA0BhD,IAAI,CAzBC,OAAC,CAAO,IAAC,CAAI,KAAC,CAAK,CAAC;IA0B3B,CAAC;IACH;;;;OAIG;IACH,UAzBG,CAAA,KAAA;QA0BC,IAAI,CAzBC,KAAC,GAAO,KAAA,CAAM;IA0BrB,CAAC;IACH;;;;;OAKG;IACH,gBAzBG,CAAA,EAAA;QA0BC,IAAI,CAzBC,6BAAC,GAA+B,EAAA,CAAG;IA0B1C,CAAC;IACH;;;;;OAKG;IACH,iBAzBG,CAAA,EAAA;QA0BC,IAAI,CAzBC,SAAC,GAAW,EAAA,CAAG;IA0BtB,CAAC;IACH;;;;OAIG;IACH,gBAzBG,CAAA,UAAA;QA0BC,IAAI,CAzBC,QAAC,GAAU,UAAA,CAAW;IA0B7B,CAAC;;AAxBI,8BAAA,GAAoC;IA0B3C,EAzBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA0BvB,QAAQ,EAzBE,iFAAA;gBA0BV,SAAS,EAzBE,CAAA,qCAAE,CAAqC;gBA0BlD,IAAI,EAzBE;oBA0BJ,iCAAiC,EAzBE,MAAA;oBA0BnC,MAAM,EAzBE,YAAA;oBA0BR,oCAAoC,EAzBE,UAAA;iBA0BvC;gBACD,QAAQ,EAzBE,qBAAA;aA0BX,EAzBC,EAAG;CA0BJ,CAzBC;AA0BF;;GAEG;AA1BF,kCAAA,GAAA,MAAA,EA4BA,CAAC;AA1BK,kCAAA,GAAyD;IA4BhE,gBAAgB,EA3BE,CAAA,EAAG,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,CAAA,UAAE,CAAU,MAAM,cAAA,CAAe,EAAC,EAAG,EAAE;IA4BzF,MAAM,EA3BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA4BzB,UAAU,EA3BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA4B7B,UAAU,EA3BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA4B7B,OAAO,EA3BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA4B1B,UAAU,EA3BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA4B7B,QAAQ,EA3BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CA4B3B,CA3BC;AA8BF;IACA,gBAAgB;IAChB,mBAAmB,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,cAAc,CAAC;IACnC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC;IACrC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC;IACpC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC7C;;;;OAIG;IACH,mBAAmB,CAAC,SAAS,CAAC,6BAA6B,CAAC;IAC5D;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC7C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,MAxFC;IAwFD;QAtFU,cAAA,GAAqB,IAAA,CAAK;QAG1B,cAAA,GAAqB,KAAA,CAAM;IAqIrC,CAAC;IA/CD;;;OAGG;IACH,IAtFG,QAAA;QAuFC,MAAM,CAtFC,IAAA,CAAK,SAAC,CAAS;IAuFxB,CAAC;IACH;;;OAGG;IACH,IAzFG,QAAA,CAAA,KAAA;QA0FC,IAAI,CAzFC,SAAC,GAAW,CAAA,KAAE,IAAQ,IAAA,IAAQ,KAAA,KAAU,KAAA,CAAM,GAAG,IAAA,GAAO,IAAA,CAAK;IA0FpE,CAAC;IACH;;;OAGG;IACH,IA1FG,QAAA;QA2FC,MAAM,CA1FC,IAAA,CAAK,SAAC,CAAS;IA2FxB,CAAC;IACH;;;OAGG;IACH,IA7FG,QAAA,CAAA,KAAA;QA8FC,IAAI,CA7FC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;IA8FhD,CAAC;;AA5FI,sCAAA,GAAoC;IA8F3C,EA7FE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA8FvB,QAAQ,EA7FE,qEAAA;gBA8FV,QAAQ,EA7FE,qBAAA;gBA8FV,IAAI,EA7FE;oBA8FJ,iCAAiC,EA7FE,MAAA;oBA8FnC,oCAAoC,EA7FE,UAAA;iBA8FvC;aACF,EA7FC,EAAG;CA8FJ,CA7FC;AA8FF;;GAEG;AA9FF,0CAAA,GAAA,MAAA,EAgGA,CAAC;AA9FK,0CAAA,GAAyD;IAgGhE,UAAU,EA/FE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgG7B,UAAU,EA/FE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAgG5B,CA/FC;AAkGF;IACA,gBAAgB;IAChB,2BAA2B,CAAC,UAAU,CAAC;IACvC;;;OAGG;IACH,2BAA2B,CAAC,cAAc,CAAC;IAC3C,gBAAgB;IAChB,2BAA2B,CAAC,cAAc,CAAC;IAC3C;;;OAGG;IACH,2BAA2B,CAAC,SAAS,CAAC,SAAS,CAAC;IAChD;;;OAGG;IACH,2BAA2B,CAAC,SAAS,CAAC,SAAS,CAAC;AAChD,CAAC;AAED;;GAEG;AACH,MAtHC;IAwND;;;;;;;OAOG;IACH,YAnIe,WAAa,EAoIb,mBAnIqB,EACd,uBAAyB,EACzB,SAAW,EACX,WAAa,EACb,mBAAqB;QAHrB,4BAAA,GAAA,uBAAA,CAAyB;QACzB,cAAA,GAAA,SAAA,CAAW;QACX,gBAAA,GAAA,WAAA,CAAa;QACb,wBAAA,GAAA,mBAAA,CAAqB;QAhGjC,aAAA,GAAoB,KAAA,CAAM;QAM1B,cAAA,GAAqB,IAAA,CAAK;QAG1B,WAAA,GAAc,IAAA,CAAK;QAGnB,sBAAA,GAA6B,IAAA,CAAK;QA0ElC,YAAA,GAA8C,IAAI,YAAA,EAAkC,CAAG;QA8I7F,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC;QAErC,IAAI,CAAC,yBAAyB,GAAG,mBAAmB,CAAC;QAErD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAU,EAAE,IAAY;gBACtD,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACxC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,uFAAuF;YACvF,qBAAqB;YACrB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;YACxB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,CAAC;IACH,CAAC;IApHH;;;OAGG;IACH,IAjHG,OAAA;QAkHC,MAAM,CAjHC,GAAA,IAAI,CAAI,EAAC,QAAE,CAAQ;IAkH5B,CAAC;IAUH;;;OAGG;IACH,IAjHG,OAAA;QAkHC,MAAM,CAjHC,IAAA,CAAK,QAAC,CAAQ;IAkHvB,CAAC;IACH;;;OAGG;IACH,IApHG,OAAA,CAAA,eAAA;QAqHC,EAAE,CAAC,CAAC,IApHC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YAqH1B,EAAE,CAAC,CAAC,eApHC,CAAe,CAAC,CAAA;gBAqHnB,gFAAgF;gBAChF,IAAI,CApHC,uBAAC,CAAuB,MAAC,CAAM,IAAC,CAAI,EAAC,EAAG,IAAA,CAAK,IAAC,CAAI,CAAC;YAqH1D,CAAC;QACH,CAAC;QAED,IAAI,CApHC,QAAC,GAAU,eAAA,CAAgB;QAsHhC,EAAE,CAAC,CAAC,eApHC,IAAkB,IAAA,CAAK,iBAAC,IAAoB,IAAA,CAAK,iBAAC,CAAiB,KAAC,IAAQ,IAAA,CAAK,KAAC,CAAK,CAAC,CAAA;YAqH3F,IAAI,CApHC,iBAAC,CAAiB,QAAC,GAAU,IAAA,CAAK;QAqHzC,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IArHG,KAAA;QAsHC,MAAM,CArHC,IAAA,CAAK,MAAC,CAAM;IAsHrB,CAAC;IACH;;;OAGG;IACH,IAxHG,KAAA,CAAA,KAAA;QAyHC,EAAE,CAAC,CAAC,IAxHC,CAAI,MAAC,IAAS,KAAA,CAAM,CAAC,CAAA;YAyHxB,EAAE,CAAC,CAAC,IAxHC,CAAI,iBAAC,IAAoB,IAAA,IAAQ,IAAA,CAAK,OAAC,CAAO,CAAC,CAAA;gBAyHlD,IAAI,CAxHC,iBAAC,CAAiB,KAAC,GAAO,KAAA,CAAM;YAyHvC,CAAC;YACD,IAAI,CAxHC,MAAC,GAAQ,KAAA,CAAM;QAyHtB,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IAxHG,QAAA;QAyHC,MAAM,CAxHC,IAAA,CAAK,SAAC,IAAY,CAAA,IAAE,CAAI,iBAAC,IAAoB,IAAA,IAAQ,IAAA,CAAK,iBAAC,CAAiB,QAAC,CAAQ;YAyHxF,CAAC,IAxHC,CAAI,yBAAC,IAA4B,IAAA,IAAQ,IAAA,CAAK,yBAAC,CAAyB,QAAC,CAAQ,CAAC;IAyH1F,CAAC;IACH;;;OAGG;IACH,IA3HG,QAAA,CAAA,KAAA;QA4HC,IAAI,CA3HC,SAAC,GAAW,CAAA,KAAE,IAAQ,IAAA,IAAQ,KAAA,KAAU,KAAA,CAAM,GAAG,IAAA,GAAO,IAAA,CAAK;IA8EpE,CAAA;IAgDF;;OAEG;IACH,IA5HI,MAAA;QA6HA,MAAM,CA5HC,IAAA,CAAK,OAAC,CAAO,YAAC,EAAY,CAAE;IA6HrC,CAAC;IAoCH;;OAEG;IACH,QArIG;QAsIC,EAAE,CAAC,CAAC,IArIC,CAAI,EAAC,IAAK,IAAA,CAAK,CAAC,CAAA;YAsInB,IAAI,CArIC,EAAC,GAAI,oBAAA,gBAAqB,EAAgB,EAAE,CAAE;QAsIrD,CAAC;QAED,EAAE,CAAC,CAAC,IArIC,CAAI,iBAAC,IAAoB,IAAA,CAAK,MAAC,IAAS,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK,CAAC,CAAA;YAsIzE,IAAI,CArIC,QAAC,GAAU,IAAA,CAAK;QAsIvB,CAAC;QACD,IAAI,CArIC,mBAAC,CAAmB,OAAC,CAAO,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,IAAA,CAAK,SAAC,EAAU,IAAA,CAAK,CAAC;IAsIzF,CAAC;IACH;;;OAGG;IACH,KAvIG;QAwIC,IAAI,CAvIC,SAAC,CAAS,mBAAC,CAAmB,IAAC,CAAI,aAAC,CAAa,aAAC,EAAc,OAAA,CAAQ,CAAC;IAwIhF,CAAC;IACH;;;OAGG;IAxIA,OAAA;QA0IC,IAAI,CAzIC,OAAC,GAAS,CAAA,IAAE,CAAI,OAAC,CAAO;IA0I/B,CAAC;IACH;;;;OAIG;IACH,cA5IG,CAAA,KAAA;QA6IC,KAAK,CA5IC,eAAC,EAAe,CAAE;QA8IxB,EAAE,CAAC,CAAC,IA5IC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YA6I1B,2EAA2E;YAC3E,4BAA4B;YAC5B,IAAI,CA5IC,OAAC,GAAS,IAAA,CAAK;YA6IpB,IAAI,CA5IC,iBAAC,CAAiB,QAAC,GAAU,IAAA,CAAK;YA6IvC,IAAI,CA5IC,iBAAC,CAAiB,SAAC,EAAS,CAAE;QA6IrC,CAAC;QA5IC,IAAA,CAAK,CAAA;YA6IL,IAAI,CA5IC,OAAC,EAAO,CAAE;QA6IjB,CAAC;QAED,kDAAkD;QAClD,IAAI,CA5IC,gBAAC,EAAgB,CAAE;IA6I1B,CAAC;IACH;;;OAGG;IACH,aA/IG,CAAA,KAAA;QAgJC,mFAAmF;QACnF,qFAAqF;QACrF,wFAAwF;QACxF,gFAAgF;QAChF,8FAA8F;QAC9F,2CAA2C;QAC3C,kEAAkE;QAClE,KAAK,CA/IC,eAAC,EAAe,CAAE;IAgJ1B,CAAC;IACH;;;OAGG;IAhJA,gBAAA;QAkJC,IAAI,gBAAgB,CAjJhB,KAAA,GAAQ,IAAI,oBAAA,EAAqB,CAAE;QAkJvC,KAAK,CAjJC,MAAC,GAAQ,IAAA,CAAK;QAkJpB,KAAK,CAjJC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM;QAkJ1B,IAAI,CAjJC,OAAC,CAAO,IAAC,CAAI,KAAC,CAAK,CAAC;IAkJ3B,CAAC;;AAhJI,yBAAA,GAAoC;IAkJ3C,EAjJE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAkJvB,QAAQ,EAjJE,MAAA,CAAO,EAAC;gBAkJlB,QAAQ,EAjJE,qCAAA;gBAkJV,WAAW,EAjJE,oBAAA;gBAkJb,SAAS,EAjJE,CAAA,mBAAE,CAAmB;gBAkJhC,aAAa,EAjJE,iBAAA,CAAkB,IAAC;gBAkJlC,IAAI,EAjJE;oBAkJJ,2BAA2B,EAjJE,MAAA;iBAkJ9B;aACF,EAjJC,EAAG;CAkJJ,CAjJC;AAkJF;;GAEG;AAlJF,6BAAA,GAAA,MAAA;IAoJD,EAAC,IAAI,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IAC/D,EAAC,IAAI,EAAE,2BAA2B,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IACvE,EAAC,IAAI,EAAE,yBAAyB,GAAG;IACnC,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,CAAC;AAlJK,6BAAA,GAAyD;IAoJhE,eAAe,EAnJE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IAoJzD,IAAI,EAnJE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAY,EAAE,EAAE,IAAA,EAAM,KAAA,EAAM,EAAE;IAoJ7C,MAAM,EAnJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAoJzB,SAAS,EAnJE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,iCAAE,EAAiC,EAAG,EAAE,EAAE,IAAA,EAAM,KAAA,EAAM,EAAE;IAoJ/F,OAAO,EAnJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAoJ1B,UAAU,EAnJE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,kCAAE,EAAkC,EAAG,EAAE,EAAE,IAAA,EAAM,KAAA,EAAM,EAAE;IAoJjG,QAAQ,EAnJE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAoJ3B,CAnJC;AAsJF;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,cAAc,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;IAC/B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC3C,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,aAAa,CAAC;IACvC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC3C;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,yBAAyB,CAAC;IACnD;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC;IAC5B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,uBAAuB,CAAC;IACjD,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,mBAAmB,CAAC;AAC7C,CAAC","file":"button-toggle.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n  /** The MdButtonToggle that emits the event. */\n  source: MdButtonToggle;\n  /** The value assigned to the MdButtonToggle. */\n  value: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\nprivate _value: any = null;\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\nprivate _disabled: boolean = null;\nprivate _vertical: boolean = false;\nprivate _selected: MdButtonToggle = null;\nprivate _isInitialized: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  \n  _buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    'role': 'radiogroup',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/** @type {?} */\nMdButtonToggleGroup.prototype._change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\nprivate _disabled: boolean = null;\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\nprivate _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\nprivate _disabled: boolean = null;\nprivate _value: any = null;\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MdButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  \n  \n  id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  \n  name: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this._change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype._change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}