{"version":3,"sources":["../../../../src/lib/button-toggle/button-toggle.ts"],"names":[],"mappings":"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","file":"button-toggle.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    'role': 'radiogroup',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/** @type {?} */\nMdButtonToggleGroup.prototype._change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = null;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the group value changes.\n */\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this._change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype._change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}