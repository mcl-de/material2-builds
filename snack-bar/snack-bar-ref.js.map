{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar-ref.ts"],"names":[],"mappings":"AAEA,OAAO,EAAA,OAAE,EAAO,MAAA,cAAA,CAAA;AAEhB;;GAEG;AACH,MAGC;IAcD;;;;OAIG;IACH,YAIG,QAAqB,EAHV,iBAImB,EACX,WAAa;QAAb,gBAAA,GAAA,WAAA,CAAa;QAVzB,iBAAA,GAA6B,IAAI,OAAA,EAAQ,CAAE;QAM3C,cAAA,GAA0B,IAAI,OAAA,EAAQ,CAAE;QAC9C,iEAAiE;QACjE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAChD,iBAAiB,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACrE,CAAC;IA7BH;;;OAGG;IACH,IACG,QAAA;QAAC,MAAM,CACC,IAAA,CAAK,SAAC,CAAS;IAAxB,CAAC;IAwBH;;;OAGG;IACH,OAEG;QADC,EAAE,CAAC,CAAC,CAEC,IAAC,CAAI,YAAC,CAAY,MAAC,CAAM,CAAC,CAAA;YAD7B,IAAI,CAEC,iBAAC,CAAiB,IAAC,EAAI,CAAE;QADhC,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,OAAG;QACC,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,SAAC,CAAS,MAAC,CAAM,CAAC,CAAA;YAC1B,IAAI,CAAC,SAAC,CAAS,IAAC,EAAI,CAAE;YACtB,IAAI,CAAC,SAAC,CAAS,QAAC,EAAQ,CAAE;QAC5B,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,KAFG;QAGC,EAAE,CAAC,CAAC,CAFC,IAAC,CAAI,YAAC,CAAY,MAAC,CAAM,CAAC,CAAA;YAG7B,IAAI,CAFC,YAAC,CAAY,IAAC,EAAI,CAAE;YAGzB,IAAI,CAFC,YAAC,CAAY,QAAC,EAAQ,CAAE;QAG/B,CAAC;IACH,CAAC;IACH;;;OAGG;IAHA,cAAA;QAKC,IAAI,CAJC,WAAC,CAAW,OAAC,EAAO,CAAE;QAK3B,IAAI,CAJC,YAAC,CAAY,IAAC,EAAI,CAAE;QAKzB,IAAI,CAJC,YAAC,CAAY,QAAC,EAAQ,CAAE;IAK/B,CAAC;IACH;;;OAGG;IACH,cANG;QAOC,MAAM,CANC,IAAA,CAAK,YAAC,CAAY,YAAC,EAAY,CAAE;IAO1C,CAAC;IACH;;;OAGG;IACH,WARG;QASC,MAAM,CARC,IAAA,CAAK,iBAAC,CAAiB,QAAC,EAAQ,CAAE;IAS3C,CAAC;IACH;;;OAGG;IACH,QAVG;QAWC,MAAM,CAVC,IAAA,CAAK,SAAC,CAAS,YAAC,EAAY,CAAE;IAWvC,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC;;;;OAIG;IACH,aAAa,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC1C;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC;IACrC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC;IACrC;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC","file":"snack-bar-ref.js","sourceRoot":"","sourcesContent":["import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\nprivate _afterClosed: Subject<any> = new Subject();\nprivate _afterOpened: Subject<any>;\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n"]}