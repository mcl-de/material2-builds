{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar-container.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAET,SAAS,EACT,MAAM,EAEN,QAAQ,EACR,UAAU,GACX,MAAM,eAAA,CAAgB;AACvB,OAAO,EACL,OAAO,EACP,KAAK,EACL,KAAK,EACL,UAAU,EACV,OAAO,GAER,MAAM,qBAAA,CAAsB;AAC7B,OAAO,EACL,cAAc,EAGd,mBAAmB,GACpB,MAAM,SAAA,CAAU;AAEjB,OAAO,EAAA,gCAAE,EAAgC,MAAA,oBAAA,CAAA;AAEzC,OAAO,EAAA,OAAE,EAAO,MAAA,cAAA,CAAA;AAMhB,sFAAsF;AACtF,2FAA2F;AAC3F,MAAM,CAAC,MAAA,gBAAA,CAAM,cAAA,GAAiB,iCAAA,CAAkC;AAChE,MAAM,CAAC,MAAA,gBAAA,CAAM,cAAA,GAAiB,mCAAA,CAAoC;AAClE;;;GAGG;AACH,MAEC,0BAAA,SAAA,cAAA;IASD;;;;OAIG;IACH,YAGY,OAAS,EACT,SAAW,EACX,WAAa;QADrB,KAAK,EAAE,CAAC;QADA,YAAA,GAAA,OAAA,CAAS;QACT,cAAA,GAAA,SAAA,CAAW;QACX,gBAAA,GAAA,WAAA,CAAa;QAdf,WAAA,GAAuB,IAAI,OAAA,EAAQ,CAAE;QAGrC,YAAA,GAAwB,IAAI,OAAA,EAAQ,CAAE;QAJ9C,6CAA6C;QAC7C,mBAAc,GAMkB,SAAA,CAAU;IAQ1C,CAAC;IACH;;;;;OAKG;IACH,qBAFG,CAAA,MAAA;QAGC,EAAE,CAAC,CAAC,IAFC,CAAI,WAAC,CAAW,WAAC,EAAW,CAAE,CAAC,CAAA;YAGlC,MAFM,IAAI,gCAAA,EAAiC,CAAE;QAG/C,CAAC;QAED,EAAE,CAAC,CAAC,IAFC,CAAI,cAAC,CAAc,YAAC,CAAY,CAAC,CAAA;YAGpC,kFAAkF;YAClF,iDAAiD;YACjD,GAAG,CAAC,CAAC,IAFC,gBAAA,CAAG,QAAA,IAAY,IAAA,CAAK,cAAC,CAAc,YAAC,CAAY,CAAC,CAAA;gBAGrD,IAAI,CAFC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,QAAA,EAAU,IAAA,CAAK,CAAC;YAGjF,CAAC;QACH,CAAC;QAED,MAAM,CAFC,IAAA,CAAK,WAAC,CAAW,qBAAC,CAAqB,MAAC,CAAM,CAAC;IAGxD,CAAC;IACH;;;;OAIG;IACH,oBALG,CAAA,MAAA;QAMC,MALM,KAAA,CAAM,qBAAC,CAAqB,CAAC;IAMrC,CAAC;IACH;;;;OAIG;IACH,cARG,CAAA,KAAA;QASC,EAAE,CAAC,CAAC,KARC,CAAK,OAAC,KAAW,MAAA,IAAU,KAAA,CAAM,OAAC,KAAW,UAAA,CAAW,CAAC,CAAA;YAS5D,IAAI,CARC,aAAC,EAAa,CAAE;QASvB,CAAC;QAED,EAAE,CAAC,CAAC,KARC,CAAK,OAAC,KAAW,SAAA,CAAU,CAAC,CAAA;YAS/B,IAAI,CARC,OAAC,CAAO,GAAC,CAAG;gBASf,IAAI,CARC,OAAC,CAAO,IAAC,EAAI,CAAE;gBASpB,IAAI,CARC,OAAC,CAAO,QAAC,EAAQ,CAAE;YAS1B,CAAC,CARC,CAAC;QASL,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,KAVG;QAWC,IAAI,CAVC,cAAC,GAAgB,SAAA,CAAU;IAWlC,CAAC;IACH;;;OAGG;IACH,QAZG;QAaC,IAAI,CAZC,cAAC,GAAgB,SAAA,CAAU;QAahC,MAAM,CAZC,IAAA,CAAK,OAAC,CAAO,YAAC,EAAY,CAAE;IAarC,CAAC;IACH;;;OAGG;IACH,IAdG;QAeC,IAAI,CAdC,cAAC,GAAgB,UAAA,CAAW;QAejC,MAAM,CAdC,IAAA,CAAK,OAAC,EAAO,CAAE;IAexB,CAAC;IACH;;;OAGG;IACH,OAhBG;QAiBC,MAAM,CAhBC,IAAA,CAAK,MAAC,CAAM,YAAC,EAAY,CAAE;IAiBpC,CAAC;IACH;;;OAGG;IACH,WAhBG;QAiBC,IAAI,CAhBC,aAAC,EAAa,CAAE;IAiBvB,CAAC;IACH;;;;OAIG;IAfA,aAAA;QAiBC,IAAI,CAhBC,OAAC,CAAO,gBAAC,CAAgB,KAAC,EAAK,CAAE,SAAC,CAAS;YAiB9C,IAAI,CAhBC,MAAC,CAAM,IAAC,EAAI,CAAE;YAiBnB,IAAI,CAhBC,MAAC,CAAM,QAAC,EAAQ,CAAE;QAiBzB,CAAC,CAhBC,CAAC;IAiBL,CAAC;;AAfI,8BAAA,GAAoC;IAiB3C,EAhBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAiBvB,QAAQ,EAhBE,MAAA,CAAO,EAAC;gBAiBlB,QAAQ,EAhBE,qBAAA;gBAiBV,WAAW,EAhBE,0BAAA;gBAiBb,SAAS,EAhBE,CAAA,yBAAE,CAAyB;gBAiBtC,IAAI,EAhBE;oBAiBJ,MAAM,EAhBE,OAAA;oBAiBR,UAAU,EAhBE,gBAAA;oBAiBZ,eAAe,EAhBE,wBAAA;iBAiBlB;gBACD,UAAU,EAhBE;oBAiBV,OAAO,CAhBC,OAAC,EAAQ;wBAiBf,KAAK,CAhBC,SAAC,EAAU,KAAA,CAAM,EAAC,SAAC,EAAU,kBAAA,EAAmB,CAAC,CAAC;wBAiBxD,KAAK,CAhBC,SAAC,EAAU,KAAA,CAAM,EAAC,SAAC,EAAU,gBAAA,EAAiB,CAAC,CAAC;wBAK1D,KAAA,CAJU,UAAC,EAAW,KAAA,CAAM,EAAC,SAAC,EAAU,kBAAA,EAAmB,CAAC,CAAC;wBAiBzD,UAAU,CAhBC,qBAAC,EAAsB,OAAA,CAAQ,cAAC,CAAc,CAAC;wBAiB1D,UAAU,CAhBC,qCAAC,EAAsC,OAAA,CAAQ,cAAC,CAAc,CAAC;qBAiB3E,CAhBC;iBAiBH;aACF,EAhBC,EAAG;CAiBJ,CAhBC;AAiBF;;GAEG;AAjBF,kCAAA,GAAA,MAAA;IAmBD,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AAjBK,kCAAA,GAAyD;IAmBhE,aAAa,EAlBE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,mBAAE,EAAmB,EAAG,EAAE;CAmBlE,CAlBC;AAqBF;IACA,gBAAgB;IAChB,mBAAmB,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,cAAc,CAAC;IACnC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC1C;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC;IACrC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;IACtC;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC7C;;;OAGG;IACH,mBAAmB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC7C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC;IACtC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC1C,CAAC","file":"snack-bar-container.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarContentAlreadyAttached} from './snack-bar-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n  /** The portal host inside of this container into which the snack bar content will be loaded. */\n   _portalHost: PortalHostDirective;\nprivate onExit: Subject<any> = new Subject();\nprivate onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  animationState: SnackBarState = 'initial';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdSnackBarContentAlreadyAttached();\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      this._ngZone.run(() => {\n        this.onEnter.next();\n        this.onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.onExit.next();\n      this.onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}