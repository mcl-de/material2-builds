{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar-container.ts"],"names":[],"mappings":"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","file":"snack-bar-container.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarContentAlreadyAttached} from './snack-bar-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdSnackBarContentAlreadyAttached();\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      this._ngZone.run(() => {\n        this.onEnter.next();\n        this.onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.onExit.next();\n      this.onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}