{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":"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","file":"snack-bar.js","sourceRoot":"","sourcesContent":["import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.positionStrategy = this._overlay.position().global()\n        .centerHorizontally()\n        .bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}