{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":"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","file":"snack-bar.js","sourceRoot":"","sourcesContent":["import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.positionStrategy = this._overlay.position().global()\n        .centerHorizontally()\n        .bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}