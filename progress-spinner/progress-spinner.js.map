{"version":3,"sources":["../../../../src/lib/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nconst /** @type {?} */ MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n      this._renderer.addClass(this._elementRef.nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2) { }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      this._renderer.setAttribute(this._path.nativeElement, 'd', getSvgArc(currentValue, rotation));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = 40;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}