{"version":3,"sources":["../../../../src/lib/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer, Directive\n} from '@angular/core';\n\n\n// TODO(josephperrott): Benchpress tests.\n\n/** A single degree in radians. */\nconst /** @type {?} */ DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nconst /** @type {?} */ startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nconst /** @type {?} */ endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nconst /** @type {?} */ MAX_ANGLE = 359.99 / 100;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\nprivate _lastAnimationId: number = 0;\nprivate _interdeterminateInterval: number;\nprivate _path: SVGPathElement;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer\n  ) {}\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        let /** @type {?} */ elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    // Caches the path reference so it doesn't have to be looked up every time.\n    let /** @type {?} */ path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n\n    // Ensure that the path was found. This may not be the case if the\n    // animation function fires too early.\n    if (path) {\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\n    }\n  }\n/**\n * Updates the color of the progress-spinner by adding the new palette class to the element\n * and removing the old one.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the given palette class on the component element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = 40;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}