{"version":3,"sources":["../../../../src/lib/slider/slider.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,UAAU,EACV,KAAK,EAEL,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAuB,iBAAA,EAAkB,MAAA,gBAAA,CAAA;AAChD,OAAO,EAAA,qBAAE,EAAsB,oBAAA,EAAkC,MAAA,SAAA,CAAA;AACjE,OAAO,EAAA,GAAE,EAAG,MAAA,iBAAA,CAAA;AACZ,OAAO,EACL,UAAU,EACV,GAAG,EACH,IAAI,EACJ,UAAU,EACV,SAAS,EACT,OAAO,EACP,WAAW,EACX,QAAQ,EACT,MAAM,2BAAA,CAA4B;AACnC,OAAO,EAAc,kBAAA,EAAmB,MAAA,oCAAA,CAAA;AAExC;;;GAGG;AACH,MAAM,gBAAA,CAAA,wBAAA,GAA2B,EAAA,CAAG;AAEpC,gDAAgD;AAChD,MAAM,gBAAA,CAAA,kBAAA,GAAqB,CAAA,CAAE;AAE7B,uEAAuE;AACvE,MAAM,gBAAA,CAAA,6BAAA,GAAgC,CAAA,CAAE;AAExC,oEAAoE;AACpE,MAAM,gBAAA,CAAA,0BAAA,GAA6B,EAAA,CAAG;AAEtC;;;GAGG;AACH,MAAM,CAAC,MAAA,gBAAA,CAAM,wBAAA,GAAgC;IAC3C,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,QAAA,CAAS;IACvC,KAAK,EAAE,IAAA;CACR,CAAC;AACF;;GAEG;AACH,MADC;CAOA;AAED;IACA;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH,MAbC;IA0VD;;;;;OAKG;IACH,YA5EG,QAAqB,EAAkB,WAAa,EACjC,mBAAqB,EAA6B,IAAM;QADpC,gBAAA,GAAA,WAAA,CAAa;QACjC,wBAAA,GAAA,mBAAA,CAAqB;QAA6B,SAAA,GAAA,IAAA,CAAM;QAhRpE,cAAA,GAAqB,KAAA,CAAM;QAM3B,YAAA,GAAU,KAAA,CAAM;QAWhB,SAAA,GAAe,GAAA,CAAI;QAgBnB,SAAA,GAAe,CAAA,CAAE;QAYjB,UAAA,GAAgB,CAAA,CAAE;QAMlB,gBAAA,GAAuB,KAAA,CAAM;QAsB7B,kBAAA,GAAiC,CAAA,CAAE;QAoBnC,WAAA,GAAiB,IAAA,CAAK;QAMtB,cAAA,GAAY,KAAA,CAAM;QAqEzB,UAAK,GAnEkC,QAAA,CAAS;QAqEjD,uDAAuD;QACtD,WAAM,GAnEG,IAAI,YAAA,EAA4B,CAAG;QAqE7C,iDAAiD;QAChD,UAAK,GAnEG,IAAI,YAAA,EAA4B,CAAG;QAmF5C,8EAA8E;QAC9E,cAAS,GArEc,QAAM,CAAA,CAAG;QAIxB,aAAA,GAAmB,CAAA,CAAE;QAyE7B;;;WAGG;QACH,eAAU,GAvEY,KAAA,CAAM;QAyE5B;;;WAGG;QACH,cAAS,GAvEY,KAAA,CAAM;QAqGnB,yBAAA,GAA+B,CAAA,CAAE;QAGjC,cAAA,GAA4B,IAAA,CAAK;QAGjC,sBAAA,GAAgC,IAAA,CAAK;QAErC,kCAAA,GAAsD,QAAM,CAAA,CAAG;QAG/D,qBAAA,GAA2B,IAAA,CAAK;QAGhC,oBAAA,GAA0B,IAAA,CAAK;QAkGrC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,QAAQ,EAAE,IAAI,CAAC;aAC3E,SAAS,CAAC,CAAC,MAAmB,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,MAAM,IAAI,MAAM,KAAK,UAAU,CAAC,CAAC;QAC5F,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAzVH;;;OAGG;IACH,IAfG,QAAA,KAAyB,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;IAgBnD;;;OAGG;IACH,IAnBG,QAAA,CAAA,KAAA,IAAqB,IAAA,CAAK,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;IAqBvE;;;OAGG;IACH,IApBG,MAAA,KAAc,MAAA,CAAO,IAAA,CAAK,OAAC,CAAO,CAAC,CAAA;IAqBtC;;;OAGG;IACH,IAxBG,MAAA,CAAA,KAAA,IAAwB,IAAA,CAAK,OAAC,GAAS,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;IA0BxE;;;OAGG;IACH,IAzBG,GAAA;QA0BC,MAAM,CAzBC,IAAA,CAAK,IAAC,CAAI;IA0BnB,CAAC;IACH;;;OAGG;IACH,IA7BG,GAAA,CAAA,CAAA;QA8BC,IAAI,CA7BC,IAAC,GAAM,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,IAAC,CAAI,CAAC;QA8B/C,IAAI,CA7BC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;IA8BzD,CAAC;IAEH;;;OAGG;IACH,IA9BG,GAAA;QA+BC,MAAM,CA9BC,IAAA,CAAK,IAAC,CAAI;IA+BnB,CAAC;IACH;;;OAGG;IACH,IAlCG,GAAA,CAAA,CAAA;QAmCC,IAAI,CAlCC,IAAC,GAAM,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,IAAC,CAAI,CAAC;QAoC/C,qEAAqE;QACrE,EAAE,CAAC,CAAC,IAlCC,CAAI,MAAC,KAAU,IAAA,CAAK,CAAC,CAAA;YAmCxB,IAAI,CAlCC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI;QAmCzB,CAAC;QACD,IAAI,CAlCC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;IAmCzD,CAAC;IAEH;;;OAGG;IACH,IAnCG,IAAA,KAAY,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,CAAC,CAAA;IAoClC;;;OAGG;IACH,IAvCG,IAAA,CAAA,CAAA;QAwCC,IAAI,CAvCC,KAAC,GAAO,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,KAAC,CAAK,CAAC;QAyCjD,EAAE,CAAC,CAAC,IAvCC,CAAI,KAAC,GAAO,CAAA,KAAM,CAAA,CAAE,CAAC,CAAA;YAwCxB,IAAI,CAvCC,aAAC,GAAe,IAAA,CAAK,KAAC,CAAK,QAAC,EAAQ,CAAE,KAAC,CAAK,GAAC,CAAG,CAAC,GAAC,EAAG,CAAE,MAAC,CAAM;QAwCrE,CAAC;IACH,CAAC;IAEH;;;OAGG;IACH,IAxCG,UAAA,KAA2B,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;IAyCvD;;;OAGG;IACH,IA5CG,UAAA,CAAA,KAAA,IAAuB,IAAA,CAAK,WAAC,GAAa,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;IA8C3E;;;OAGG;IACH,IA7CG,qBAAA,KAAsC,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;IA8ClE;;;OAGG;IACH,IAjDG,qBAAA,CAAA,KAAA,IAAkC,IAAA,CAAK,WAAC,GAAa,KAAA,CAAM,CAAC,CAAA;IAkD/D;;;;OAIG;IACH,IAhDG,YAAA,KAAoB,MAAA,CAAO,IAAA,CAAK,aAAC,CAAa,CAAC,CAAA;IAiDlD;;;OAGG;IACH,IApDG,YAAA,CAAA,KAAA;QAqDC,EAAE,CAAC,CAAC,KApDC,KAAS,MAAA,CAAO,CAAC,CAAA;YAqDpB,IAAI,CApDC,aAAC,GAAe,MAAA,CAAO;QAqD9B,CAAC;QApDC,IAAA,CAAK,EAAA,CAAA,CAAA,OAAW,KAAA,KAAU,QAAA,IAAY,OAAO,KAAA,KAAU,QAAA,CAAS,CAAC,CAAA;YAqDjE,IAAI,CApDC,aAAC,GAAe,oBAAA,CAAqB,KAAC,EAAK,gBAAA,CAAA,CAAC,IAAA,CAAK,aAAiB,CAAA,CAAO,CAAC;QAqDjF,CAAC;QApDC,IAAA,CAAK,CAAA;YAqDL,IAAI,CApDC,aAAC,GAAe,CAAA,CAAE;QAqDzB,CAAC;IACH,CAAC;IAEH;;;OAGG;IACH,IArDG,uBAAA,KAA+B,MAAA,CAAO,IAAA,CAAK,YAAC,CAAY,CAAC,CAAA;IAsD5D;;;OAGG;IACH,IAzDG,uBAAA,CAAA,CAAA,IAAgC,IAAA,CAAK,YAAC,GAAc,CAAA,CAAE,CAAC,CAAA;IA0D1D;;;OAGG;IACH,IA1DG,KAAA;QA2DC,yFAAyF;QACzF,EAAE,CAAC,CAAC,IA1DC,CAAI,MAAC,KAAU,IAAA,CAAK,CAAC,CAAA;YA2DxB,IAAI,CA1DC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI;QA2DzB,CAAC;QACD,MAAM,CA1DC,IAAA,CAAK,MAAC,CAAM;IA2DrB,CAAC;IACH;;;OAGG;IACH,IA9DG,KAAA,CAAA,CAAA;QA+DC,IAAI,CA9DC,MAAC,GAAQ,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,MAAC,CAAM,CAAC;QA+DnD,IAAI,CA9DC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;IA+DzD,CAAC;IAEH;;;OAGG;IACH,IA/DG,QAAA,KAAgB,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;IAgE1C;;;OAGG;IACH,IAnEG,QAAA,CAAA,KAAA,IAA0B,IAAA,CAAK,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;IA6E5E;;;OAGG;IACH,IArEG,YAAA;QAsEC,oFAAoF;QACpF,oFAAoF;QACpF,gCAAgC;QAChC,EAAE,CAAC,CAAC,IArEC,CAAI,aAAC,IAAgB,IAAA,CAAK,KAAC,GAAO,CAAA,KAAM,CAAA,CAAE,CAAC,CAAA;YAsE9C,MAAM,CArEC,IAAA,CAAK,KAAC,CAAK,OAAC,CAAO,IAAC,CAAI,aAAC,CAAa,CAAC;QAsEhD,CAAC;QAED,MAAM,CArEC,IAAA,CAAK,KAAC,CAAK;IAsEpB,CAAC;IAIH;;;OAGG;IACH,IAvEG,OAAA,KAAe,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC,CAAA;IAqFrD;;;;OAIG;IACH,IAvEG,WAAA;QAwEC,+FAA+F;QAC/F,0DAA0D;QAC1D,MAAM,CAvEC,IAAA,CAAK,QAAC,GAAU,CAAA,IAAE,CAAI,MAAC,GAAQ,IAAA,CAAK,MAAC,CAAM;IAwEpD,CAAC;IACH;;;OAGG;IACH,IAxEG,WAAA;QAyEC,MAAM,CAxEC,IAAA,CAAK,OAAC,KAAW,CAAA,CAAE;IAyE5B,CAAC;IACH;;;;OAIG;IACH,IAxEG,SAAA;QAyEC,EAAE,CAAC,CAAC,IAxEC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAyEjB,MAAM,CAxEC,kBAAA,CAAmB;QAyE5B,CAAC;QACD,EAAE,CAAC,CAAC,IAxEC,CAAI,WAAC,IAAc,CAAA,IAAE,CAAI,UAAC,CAAU,CAAC,CAAA;YAyExC,MAAM,CAxEC,IAAA,CAAK,SAAC,GAAW,0BAAA,GAA6B,6BAAA,CAA8B;QAyErF,CAAC;QACD,MAAM,CAxEC,CAAA,CAAE;IAyEX,CAAC;IACH;;;OAGG;IACH,IA1EG,sBAAA;QA2EC,IAAI,gBAAgB,CA1EhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QA2ErC,IAAI,gBAAgB,CA1EhB,IAAA,GAAO,IAAA,CAAK,kBAAC,GAAoB,GAAA,GAAM,EAAA,CAAG;QA2E9C,MAAM,CA1EC;YA2EL,WAAW,EA1EE,YAAA,IAAa,IAAI,IAAI,GAAI,IAAG,CAAI,SAAC,YAAS,IAAY,IAAI,CAAI,GAAG,IAAA,CAAK,OAAC,GAAO;SA2E5F,CA1EC;IA2EJ,CAAC;IACH;;;OAGG;IACH,IA5EG,gBAAA;QA6EC,IAAI,gBAAgB,CA5EhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QA6ErC,IAAI,gBAAgB,CA5EhB,IAAA,GAAO,IAAA,CAAK,kBAAC,GAAoB,EAAA,GAAK,GAAA,CAAI;QA6E9C,MAAM,CA5EC;YA6EL,WAAW,EA5EE,YAAA,IAAa,IAAI,IAAI,GAAI,IAAG,CAAI,SAAC,YAAS,IAAY,IAAI,IAAI,CAAI,OAAC,GAAO;SA6ExF,CA5EC;IA6EJ,CAAC;IACH;;;OAGG;IACH,IA9EG,qBAAA;QA+EC,IAAI,gBAAgB,CA9EhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QA+ErC,yFAAyF;QACzF,+EAA+E;QAC/E,IAAI,gBAAgB,CA9EhB,IAAA,GAAO,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,EAAA,GAAK,GAAA,CAAI;QA+EjE,IAAI,gBAAgB,CA9EhB,MAAA,GAAS,IAAA,CAAK,oBAAC,GAAsB,CAAA,GAAI,GAAA,CAAI;QA+EjD,MAAM,CA9EC;YA+EL,WAAW,EA9EE,YAAA,IAAa,IAAI,IAAI,GAAI,MAAG,IAAM;SA+EhD,CA9EC;IA+EJ,CAAC;IACH;;;OAGG;IACH,IAhFG,YAAA;QAiFC,IAAI,gBAAgB,CAhFhB,QAAA,GAAW,IAAA,CAAK,oBAAC,GAAsB,GAAA,CAAI;QAiF/C,IAAI,gBAAgB,CAhFhB,cAAA,GAAiB,IAAA,CAAK,QAAC,GAAU,OAAA,QAAQ,GAAQ,GAAK,GAAA,QAAI,OAAQ,CAAO;QAiF7E,IAAI,gBAAgB,CAhFhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QAiFrC,wFAAwF;QACxF,8FAA8F;QAC9F,gFAAgF;QAChF,IAAI,gBAAgB,CAhFhB,IAAA,GAAO,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,GAAA,GAAM,EAAA,CAAG;QAiFjE,IAAI,gBAAgB,CAhFhB,MAAA,GAAS,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,iBAAA,GAAoB,EAAA,CAAG;QAiFjF,IAAI,gBAAgB,CAhFhB,MAAA,GAAoC;YAiFtC,gBAAgB,EAhFE,cAAA;YAiFlB,qFAAqF;YACrF,WAAW,EAhFE,0BAAA,IAA2B,IAAI,IAAI,GAAI,QAAG,GAAU,CAAA,KAAE,MAAK,EAAM;SAiF/E,CAhFC;QAkFF,EAAE,CAAC,CAAC,IAhFC,CAAI,WAAC,IAAc,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;YAiFtC,IAAI,gBAAgB,CAhFhB,IAAA,GAAO,IAAA,CAAK,QAAC;gBAiFb,CAAC,IAhFC,CAAI,WAAC,GAAa,QAAA,GAAW,KAAA,CAAM;gBAiFrC,CAAC,IAhFC,CAAI,WAAC,GAAa,OAAA,GAAU,MAAA,CAAO,CAAC;YAiF1C,MAAM,CAhFC,UAAC,IAAU,EAAI,CAAE,GAAG,GAAA,IAAI,CAAI,SAAC,IAAS,CAAI;QAiFnD,CAAC;QAED,MAAM,CAhFC,MAAA,CAAO;IAiFhB,CAAC;IACH;;OAEG;IACH,IAlFG,qBAAA;QAmFC,IAAI,gBAAgB,CAlFhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QAmFrC,yFAAyF;QACzF,+EAA+E;QAC/E,IAAI,gBAAgB,CAlFhB,YAAA,GAmFA,CAAC,IAlFC,CAAI,UAAC,IAAa,KAAA,IAAS,CAAA,IAAE,CAAI,QAAC,CAAQ,GAAG,CAAA,IAAE,CAAI,WAAC,GAAa,IAAA,CAAK,WAAC,CAAW;QAmFxF,IAAI,gBAAgB,CAlFhB,MAAA,GAAS,CAAA,YAAE,GAAc,IAAA,CAAK,OAAC,GAAS,CAAA,GAAI,IAAA,CAAK,OAAC,CAAO,GAAG,GAAA,CAAI;QAmFpE,MAAM,CAlFC;YAmFL,WAAW,EAlFE,YAAA,IAAa,KAAI,MAAK,IAAM;SAmF1C,CAlFC;IAmFJ,CAAC;IAQH;;;;OAIG;IACH,IArEG,kBAAA;QAsEC,MAAM,CArEC,CAAA,IAAE,CAAI,UAAC,IAAa,KAAA,IAAS,CAAA,IAAE,CAAI,QAAC,CAAQ,GAAG,CAAA,IAAE,CAAI,WAAC,GAAa,IAAA,CAAK,WAAC,CAAW;IAsE7F,CAAC;IACH;;;OAGG;IACH,IAvEG,UAAA;QAwEC,MAAM,CAvEC,CAAA,IAAE,CAAI,IAAC,IAAO,IAAA,CAAK,IAAC,CAAI,KAAC,IAAQ,KAAA,CAAM,GAAG,KAAA,GAAQ,KAAA,CAAM;IAwEjE,CAAC;IAeH;;OAEG;IACH,WAhFG;QAiFC,IAAI,CAhFC,mBAAC,CAAmB,cAAC,CAAc,IAAC,CAAI,WAAC,CAAW,aAAC,CAAa,CAAC;IAiF1E,CAAC;IACH;;OAEG;IACH,aAlFG;QAmFC,EAAE,CAAC,CAAC,IAlFC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAmFjB,MAAM,CAAC;QACT,CAAC;QAED,4FAA4F;QAC5F,yEAAyE;QACzE,IAAI,CAlFC,iBAAC,GAAmB,IAAA,CAAK,SAAC,CAAS,mBAAC,EAAmB,CAAE;QAmF9D,IAAI,CAlFC,0BAAC,EAA0B,CAAE;IAmFpC,CAAC;IACH;;;OAGG;IACH,QArFG,CAAA,KAAA;QAsFC,EAAE,CAAC,CAAC,IArFC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAsFjB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CArFC,UAAC,GAAY,KAAA,CAAM;QAsFxB,IAAI,CArFC,SAAC,CAAS,QAAC,EAAQ,CAAE;QAsF1B,IAAI,CArFC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,OAAC,EAAQ,CAAA,EAAG,KAAA,CAAM,OAAC,EAAO,CAAC,CAAC;QAuFpE,0DAA0D;QAC1D,IAAI,CArFC,eAAC,EAAe,CAAE;QAsFvB,IAAI,CArFC,mBAAC,EAAmB,CAAE;IAsF7B,CAAC;IACH;;;OAGG;IACH,QAxFG,CAAA,KAAA;QAyFC,EAAE,CAAC,CAAC,IAxFC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAyFjB,MAAM,CAAC;QACT,CAAC;QAED,kDAAkD;QAClD,KAAK,CAxFC,cAAC,EAAc,CAAE;QAyFvB,IAAI,CAxFC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,CAAA,EAAG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAC,CAAC,CAAC;QA0FtE,yFAAyF;QACzF,IAAI,CAxFC,eAAC,EAAe,CAAE;IAyFzB,CAAC;IACH;;;OAGG;IACH,aA3FG,CAAA,KAAA;QA4FC,EAAE,CAAC,CAAC,IA3FC,CAAI,QAAC,CAAQ,CAAC,CAAA;YA4FjB,MAAM,CAAC;QACT,CAAC;QAED,uDAAuD;QACvD,IAAI,CA3FC,aAAC,EAAa,CAAE;QA6FrB,KAAK,CA3FC,cAAC,EAAc,CAAE;QA4FvB,IAAI,CA3FC,UAAC,GAAY,IAAA,CAAK;QA4FvB,IAAI,CA3FC,SAAC,CAAS,QAAC,EAAQ,CAAE;QA4F1B,IAAI,CA3FC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,CAAA,EAAG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAC,CAAC,CAAC;IA4FxE,CAAC;IACH;;OAEG;IACH,WA7FG;QA8FC,IAAI,CA7FC,UAAC,GAAY,KAAA,CAAM;QA8FxB,IAAI,CA7FC,mBAAC,EAAmB,CAAE;IA8F7B,CAAC;IACH;;OAEG;IACH,QA/FG;QAgGC,4FAA4F;QAC5F,yEAAyE;QACzE,IAAI,CA/FC,iBAAC,GAAmB,IAAA,CAAK,SAAC,CAAS,mBAAC,EAAmB,CAAE;QAgG9D,IAAI,CA/FC,0BAAC,EAA0B,CAAE;IAgGpC,CAAC;IACH;;OAEG;IACH,OAjGG;QAkGC,IAAI,CAjGC,SAAC,EAAS,CAAE;IAkGnB,CAAC;IACH;;;OAGG;IACH,UApGG,CAAA,KAAA;QAqGC,EAAE,CAAC,CAAC,IApGC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAAE,MAAA,CAAA;QAAQ,CAAA;QAsG7B,MAAM,CAAC,CAAC,KApGC,CAAK,OAAC,CAAO,CAAC,CAAA;YAqGrB,KApGK,OAAA;gBAqGH,IAAI,CApGC,UAAC,CAAU,EAAC,CAAE,CAAC;gBAqGpB,KAAK,CAAC;YACR,KApGK,SAAA;gBAqGH,IAAI,CApGC,UAAC,CAAU,CAAC,EAAC,CAAE,CAAC;gBAqGrB,KAAK,CAAC;YACR,KApGK,GAAA;gBAqGH,IAAI,CApGC,KAAC,GAAO,IAAA,CAAK,GAAC,CAAG;gBAqGtB,KAAK,CAAC;YACR,KApGK,IAAA;gBAqGH,IAAI,CApGC,KAAC,GAAO,IAAA,CAAK,GAAC,CAAG;gBAqGtB,KAAK,CAAC;YACR,KApGK,UAAA;gBAqGH,4FAA4F;gBAC5F,uFAAuF;gBACvF,yFAAyF;gBACzF,0FAA0F;gBAC1F,0FAA0F;gBAC1F,2FAA2F;gBAC3F,uDAAuD;gBACvD,IAAI,CApGC,UAAC,CAAU,IAAC,CAAI,UAAC,IAAa,KAAA,GAAQ,CAAA,GAAI,CAAA,CAAE,CAAC,CAAC;gBAqGnD,KAAK,CAAC;YACR,KApGK,QAAA;gBAqGH,IAAI,CApGC,UAAC,CAAU,CAAC,CAAC,CAAC;gBAqGnB,KAAK,CAAC;YACR,KApGK,WAAA;gBAqGH,kFAAkF;gBAClF,IAAI,CApGC,UAAC,CAAU,IAAC,CAAI,UAAC,IAAa,KAAA,GAAQ,CAAA,CAAE,GAAG,CAAA,CAAE,CAAC;gBAqGnD,KAAK,CAAC;YACR,KApGK,UAAA;gBAqGH,IAAI,CApGC,UAAC,CAAU,CAAC,CAAC,CAAC,CAAC;gBAqGpB,KAAK,CAAC;YACR;gBACE,4FAA4F;gBAC5F,MAAM;gBACN,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CApGC,UAAC,GAAY,IAAA,CAAK;QAqGvB,KAAK,CApGC,cAAC,EAAc,CAAE;IAqGzB,CAAC;IACH;;OAEG;IACH,QAtGG;QAuGC,IAAI,CAtGC,UAAC,GAAY,KAAA,CAAM;IAuG1B,CAAC;IACH;;;;OAIG;IAxGA,UAAA,CAAA,QAAA;QA0GC,IAAI,CAzGC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,KAAC,GAAO,IAAA,CAAK,IAAC,GAAM,QAAA,EAAU,IAAA,CAAK,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,CAAC;QA0GhF,IAAI,CAzGC,eAAC,EAAe,CAAE;QA0GvB,IAAI,CAzGC,mBAAC,EAAmB,CAAE;IA0G7B,CAAC;IACH;;;;OAIG;IA3GA,wBAAA,CAAA,GAAA;QA6GC,EAAE,CAAC,CAAC,CA5GC,IAAC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YA6G3B,MAAM,CAAC;QACT,CAAC;QAED,IAAI,gBAAgB,CA5GhB,MAAA,GAAS,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,GAAC,GAAK,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI;QA6GtF,IAAI,gBAAgB,CA5GhB,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,MAAC,GAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK;QA6GxF,IAAI,gBAAgB,CA5GhB,YAAA,GAAe,IAAA,CAAK,QAAC,GAAU,GAAA,CAAI,CAAC,GAAG,GAAA,CAAI,CAAC,CAAC;QA8GjD,wFAAwF;QACxF,IAAI,gBAAgB,CA5GhB,OAAA,GAAU,IAAA,CAAK,MAAC,CAAM,CAAC,YAAC,GAAc,MAAA,CAAO,GAAG,IAAA,CAAK,CAAC;QA6G1D,EAAE,CAAC,CAAC,IA5GC,CAAI,kBAAC,CAAkB,CAAC,CAAA;YA6G3B,OAAO,GA5GG,CAAA,GAAI,OAAA,CAAQ;QA6GxB,CAAC;QACD,IAAI,gBAAgB,CA5GhB,UAAA,GAAa,IAAA,CAAK,eAAC,CAAe,OAAC,CAAO,CAAC;QA8G/C,+FAA+F;QAC/F,4BAA4B;QAC5B,IAAI,gBAAgB,CA5GhB,YAAA,GAAe,IAAA,CAAK,KAAC,CAAK,CAAC,UAAC,GAAY,IAAA,CAAK,GAAC,CAAG,GAAG,IAAA,CAAK,IAAC,CAAI,GAAG,IAAA,CAAK,IAAC,GAAM,IAAA,CAAK,GAAC,CAAG;QA6G1F,8CAA8C;QAC9C,IAAI,CA5GC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM,YAAC,EAAa,IAAA,CAAK,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,CAAC;IA6G7D,CAAC;IACH;;;OAGG;IA7GA,mBAAA;QA+GC,EAAE,CAAC,CAAC,IA9GC,CAAI,KAAC,IAAQ,IAAA,CAAK,gBAAC,CAAgB,CAAC,CAAA;YA+GvC,IAAI,gBAAgB,CA9GhB,KAAA,GAAQ,IAAA,CAAK,kBAAC,EAAkB,CAAE;YA+GtC,IAAI,CA9GC,gBAAC,GAAkB,IAAA,CAAK,KAAC,CAAK;YA+GnC,IAAI,CA9GC,6BAAC,CAA6B,IAAC,CAAI,KAAC,CAAK,CAAC;YA+G/C,IAAI,CA9GC,MAAC,CAAM,IAAC,CAAI,KAAC,CAAK,CAAC;QA+G1B,CAAC;IACH,CAAC;IACH;;;OAGG;IA/GA,eAAA;QAiHC,EAAE,CAAC,CAAC,IAhHC,CAAI,KAAC,IAAQ,IAAA,CAAK,eAAC,CAAe,CAAC,CAAA;YAiHtC,IAAI,gBAAgB,CAhHhB,KAAA,GAAQ,IAAA,CAAK,kBAAC,EAAkB,CAAE;YAiHtC,IAAI,CAhHC,eAAC,GAAiB,IAAA,CAAK,KAAC,CAAK;YAiHlC,IAAI,CAhHC,KAAC,CAAK,IAAC,CAAI,KAAC,CAAK,CAAC;QAiHzB,CAAC;IACH,CAAC;IACH;;;OAGG;IAjHA,0BAAA;QAmHC,EAAE,CAAC,CAAC,CAlHC,IAAC,CAAI,YAAC,CAAY,CAAC,CAAA;YAmHtB,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAlHC,CAAI,YAAC,IAAe,MAAA,CAAO,CAAC,CAAA;YAmH/B,IAAI,gBAAgB,CAlHhB,SAAA,GAAY,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,MAAC,GAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK;YAmH7F,IAAI,gBAAgB,CAlHhB,aAAA,GAAgB,SAAA,GAAY,IAAA,CAAK,IAAC,GAAM,CAAA,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;YAmHlE,IAAI,gBAAgB,CAlHhB,YAAA,GAAe,IAAA,CAAK,IAAC,CAAI,wBAAC,GAA0B,aAAA,CAAc,CAAC;YAmHvE,IAAI,gBAAgB,CAlHhB,aAAA,GAAgB,YAAA,GAAe,IAAA,CAAK,IAAC,CAAI;YAmH7C,IAAI,CAlHC,oBAAC,GAAsB,aAAA,GAAgB,SAAA,CAAU;QAmHxD,CAAC;QAlHC,IAAA,CAAK,CAAA;YAmHL,IAAI,CAlHC,oBAAC,GAAsB,IAAA,CAAK,YAAC,GAAc,IAAA,CAAK,IAAC,GAAM,CAAA,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;QAmHpF,CAAC;IACH,CAAC;IACH;;;;OAIG;IApHA,kBAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA;QAsHC,IAAI,gBAAgB,CArHhB,KAAA,GAAQ,IAAI,cAAA,EAAe,CAAE;QAuHjC,KAAK,CArHC,MAAC,GAAQ,IAAA,CAAK;QAsHpB,KAAK,CArHC,KAAC,GAAO,KAAA,CAAM;QAuHpB,MAAM,CArHC,KAAA,CAAM;IAsHf,CAAC;IACH;;;;OAIG;IAvHA,oBAAA,CAAA,KAAA;QAyHC,MAAM,CAxHC,CAAA,KAAE,GAAO,IAAA,CAAK,GAAC,CAAG,GAAG,CAAA,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;IAyHpD,CAAC;IACH;;;;OAIG;IA1HA,eAAA,CAAA,UAAA;QA4HC,MAAM,CA3HC,IAAA,CAAK,GAAC,GAAK,UAAA,GAAa,CAAA,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;IA4HvD,CAAC;IACH;;;;;;OAMG;IA/HA,MAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAA;QAiIC,MAAM,CAhIC,IAAA,CAAK,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,KAAC,EAAM,GAAA,CAAI,CAAC,CAAC;IAiI7C,CAAC;IACH;;;;OAIG;IACH,UAhIG,CAAA,KAAA;QAiIC,IAAI,CAhIC,KAAC,GAAO,KAAA,CAAM;IAiIrB,CAAC;IACH;;;;;OAKG;IACH,gBAhIG,CAAA,EAAA;QAiIC,IAAI,CAhIC,6BAAC,GAA+B,EAAA,CAAG;IAiI1C,CAAC;IACH;;;;;OAKG;IACH,iBAhIG,CAAA,EAAA;QAiIC,IAAI,CAhIC,SAAC,GAAW,EAAA,CAAG;IAiItB,CAAC;IACH;;;;;OAKG;IACH,gBAhIG,CAAA,UAAA;QAiIC,IAAI,CAhIC,QAAC,GAAU,UAAA,CAAW;IAiI7B,CAAC;;AA/HI,mBAAA,GAAoC;IAiI3C,EAhIE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAiIvB,QAAQ,EAhIE,MAAA,CAAO,EAAC;gBAiIlB,QAAQ,EAhIE,uBAAA;gBAiIV,SAAS,EAhIE,CAAA,wBAAE,CAAwB;gBAiIrC,IAAI,EAhIE;oBAiIJ,oBAAoB,EAhIE,MAAA;oBAiItB,SAAS,EAhIE,YAAA;oBAiIX,QAAQ,EAhIE,WAAA;oBAiIV,SAAS,EAhIE,kBAAA;oBAiIX,WAAW,EAhIE,oBAAA;oBAiIb,SAAS,EAhIE,YAAA;oBAiIX,cAAc,EAhIE,iBAAA;oBAiIhB,SAAS,EAhIE,kBAAA;oBAiIX,YAAY,EAhIE,eAAA;oBAiId,cAAc,EAhIE,uBAAA;oBAiIhB,MAAM,EAhIE,QAAA;oBAiIR,UAAU,EAhIE,GAAA;oBAiIZ,sBAAsB,EAhIE,UAAA;oBAiIxB,sBAAsB,EAhIE,KAAA;oBAiIxB,sBAAsB,EAhIE,KAAA;oBAiIxB,sBAAsB,EAhIE,OAAA;oBAiIxB,qBAAqB,EAhIE,oBAAA;oBAiIvB,oBAAoB,EAhIE,uCAAA;oBAiItB,kBAAkB,EAhIE,iBAAA;oBAiIpB,6BAA6B,EAhIE,UAAA;oBAiI/B,8BAA8B,EAhIE,cAAA;oBAiIhC,+BAA+B,EAhIE,WAAA;oBAiIjC,kCAAkC,EAhIE,aAAA;oBAiIpC,4BAA4B,EAhIE,YAAA;oBAiI9B,wCAAwC,EAhIE,YAAA;oBAiI1C,6BAA6B,EAhIE,UAAA;oBAiI/B,8BAA8B,EAhIE,aAAA;oBAiIhC,mCAAmC,EAhIE,qDAAA;iBAiItC;gBACD,WAAW,EAhIE,aAAA;gBAiIb,SAAS,EAhIE,CAAA,YAAE,CAAY;gBAiIzB,aAAa,EAhIE,iBAAA,CAAkB,IAAC;aAiInC,EAhIC,EAAG;CAiIJ,CAhIC;AAiIF;;GAEG;AAjIF,uBAAA,GAAA,MAAA;IAmID,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,kBAAkB,GAAG;IAC5B,EAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;CAC9C,CAAC;AAjIK,uBAAA,GAAyD;IAmIhE,UAAU,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI7B,QAAQ,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI3B,KAAK,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmIxB,KAAK,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmIxB,MAAM,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmIzB,YAAY,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI/B,uBAAuB,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE;IAmInE,cAAc,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmIjC,yBAAyB,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,eAAE,EAAe,EAAG,EAAE;IAmIvE,OAAO,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI1B,UAAU,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI7B,OAAO,EAlIE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmI1B,QAAQ,EAlIE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAmI5B,OAAO,EAlIE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAmI1B,CAlIC;AAqIF;IACA,gBAAgB;IAChB,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAGG;IACH,QAAQ,CAAC,cAAc,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,cAAc,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IACjC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1B;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC5B;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;IAC9B;;;;OAIG;IACH,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACxC;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACrC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,6BAA6B,CAAC;IACjD;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACpC;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC;IACnC;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IACjC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACvC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;AACxB,CAAC;AAED;;;GAGG;AACH,MArOC;IAuOD;;OAEG;IACH,YAvOG,UAAuB;QAwOtB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,aAAa,CAAC;IACjD,CAAC;IACH;;;;;OAKG;IACH,mBAvOG;QAwOC,IAAI,gBAAgB,CAvOhB,cAAA,GAAiB,IAAA,CAAK,cAAC,CAAc,aAAC,CAAa,qBAAC,CAAqB,CAAC;QAwO9E,MAAM,CAvOC,cAAA,CAAe,qBAAC,EAAqB,CAAE;IAwOhD,CAAC;IACH;;;;OAIG;IACH,QAvOG;QAwOC,IAAI,CAvOC,cAAC,CAAc,KAAC,EAAK,CAAE;IAwO9B,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,cAAc,CAAC;AACxC,CAAC","file":"slider.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst /** @type {?} */ MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst /** @type {?} */ DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst /** @type {?} */ MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst /** @type {?} */ MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const /** @type {?} */ MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n  /** The MdSlider that changed. */\n  source: MdSlider;\n\n  /** Thew new value of the source slider. */\n  value: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * Thew new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider implements ControlValueAccessor, OnDestroy {\n/**\n * Whether or not the slider is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\nprivate _disabled: boolean = false;\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n\n  /** Event emitted when the slider value has changed. */\n   change = new EventEmitter<MdSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n   input = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\nprivate _tickIntervalPercent: number = 0;\nprivate _renderer: SliderRenderer = null;\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\nprivate _lastChangeValue: number = null;\nprivate _lastInputValue: number = null;\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-slider]': 'true',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._disabled;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}