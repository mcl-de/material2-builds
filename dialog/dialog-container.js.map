{"version":3,"sources":["../../../../src/lib/dialog/dialog-container.ts"],"names":[],"mappings":"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","file":"dialog-container.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n  EventEmitter,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport'rxjs/add/operator/first';\n\n\n/** Possible states for the dialog container animation. */\nexport type MdDialogContainerAnimationState = 'void' | 'enter' | 'exit' | 'exit-start';\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost implements OnDestroy {\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n   _portalHost: PortalHostDirective;\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n\n  /** The dialog configuration. */\n  dialogConfig: MdDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: MdDialogContainerAnimationState = 'enter';\n\n  /** Emits the current animation state whenever it changes. */\n  _onAnimationStateChange = new EventEmitter<MdDialogContainerAnimationState>();\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( document.activeElement as HTMLElement));\n    this._focusTrap.focusFirstTabbableElementWhenReady();\n  }\n/**\n * Kicks off the leave animation.\n * \\@docs-private\n * @return {?}\n */\n_exit(): void {\n    this._state = 'exit';\n    this._onAnimationStateChange.emit('exit-start');\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    }\n\n    this._onAnimationStateChange.emit( /** @type {?} */((event.toState as MdDialogContainerAnimationState)));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // When the dialog is destroyed, return focus to the element that originally had it before\n    // the dialog was opened. Wait for the DOM to finish settling before changing the focus so\n    // that it doesn't end up back on the <body>. Also note that we need the extra check, because\n    // IE can set the `activeElement` to null in some cases.\n    let /** @type {?} */ toFocus = /** @type {?} */(( this._elementFocusedBeforeDialogWasOpened as HTMLElement));\n\n    // We shouldn't use `this` inside of the NgZone subscription, because it causes a memory leak.\n    let /** @type {?} */ animationStream = this._onAnimationStateChange;\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (toFocus && 'focus' in toFocus) {\n        toFocus.focus();\n      }\n\n      animationStream.complete();\n    });\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      state('void', style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 })),\n      state('enter', style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),\n      state('exit', style({ transform: 'translateY(25%)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    '[class.mat-dialog-container]': 'true',\n    '[attr.role]': 'dialogConfig?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype.dialogConfig;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._renderer;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}