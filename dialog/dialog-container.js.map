{"version":3,"sources":["../../../../src/lib/dialog/dialog-container.ts"],"names":[],"mappings":"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","file":"dialog-container.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  Renderer,\n  ElementRef,\n  EventEmitter,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n/**\n * The dialog configuration.\n */\ndialogConfig: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( document.activeElement as HTMLElement));\n    this._focusTrap.focusFirstTabbableElementWhenReady();\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._onAnimationStateChange.complete();\n    }\n  }\n/**\n * Kicks off the leave animation and restores focus to the previously-focused element.\n * \\@docs-private\n * @return {?}\n */\n_exit(): void {\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    let /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._state = 'exit';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('enter', style({ transform: 'translate3d(0, 0, 0) scale(1)', opacity: 1 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    '[class.mat-dialog-container]': 'true',\n    '[attr.role]': 'dialogConfig?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype.dialogConfig;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._renderer;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}