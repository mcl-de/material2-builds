{"version":3,"sources":["../../../../src/lib/dialog/dialog-content-directives.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAM,MAAA,eAAA,CAAA;AACzB,OAAO,EAAA,WAAE,EAAW,MAAA,cAAA,CAAA;AACpB;;GAEG;AACH,MAGC;IAAD;;OAEG;IACH,YACqB,SAA2B;QAA3B,cAAA,GAAA,SAAA,CAA2B;QAN9C,yCAAyC;QACxC,cAAS,GAGW,cAAA,CAAe;IAEW,CAAA;;AAC1C,wBAAA,GAAoC;IAA3C,EACE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAAvB,QAAQ,EACE,mDAAA;gBAAV,IAAI,EACE;oBAAJ,SAAS,EACE,mBAAA;oBAAX,mBAAmB,EACE,WAAA;oBAArB,MAAM,EACE,QAAA;iBAAT;aACF,EACC,EAAG;CAAJ,CACC;AAAF;;GAEG;AAAF,4BAAA,GAAA,MAAA;IAED,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CAAC;AAAK,4BAAA,GAAyD;IAEhE,WAAW,EADE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,YAAE,EAAY,EAAG,EAAE;CAErD,CADC;AAIF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,cAAc,CAAC;IAC7B;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;AAClC,CAAC;AAED;;GAEG;AACH,MAnBC;;AAAmC,wBAAA,GAAoC;IAoBxE,EAnBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAoBvB,QAAQ,EAnBE,uCAAA;gBAoBV,IAAI,EAnBE;oBAoBJ,0BAA0B,EAnBE,MAAA;iBAoB7B;aACF,EAnBC,EAAG;CAoBJ,CAnBC;AAoBF;;GAEG;AApBF,4BAAA,GAAA,MAAA,EAsBA,CAAC;AAGF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;AAC7B,CAAC;AAED;;GAEG;AACH,MA7BC;;AAAqC,0BAAA,GAAoC;IA8B1E,EA7BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA8BvB,QAAQ,EA7BE,kFAAA;gBA8BV,IAAI,EA7BE;oBA8BJ,4BAA4B,EA7BE,MAAA;iBA8B/B;aACF,EA7BC,EAAG;CA8BJ,CA7BC;AA8BF;;GAEG;AA9BF,8BAAA,GAAA,MAAA,EAgCA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH,MAvCC;;AAAqC,0BAAA,GAAoC;IAwC1E,EAvCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAwCvB,QAAQ,EAvCE,kFAAA;gBAwCV,IAAI,EAvCE;oBAwCJ,4BAA4B,EAvCE,MAAA;iBAwC/B;aACF,EAvCC,EAAG;CAwCJ,CAvCC;AAwCF;;GAEG;AAxCF,8BAAA,GAAA,MAAA,EA0CA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC","file":"dialog-content-directives.js","sourceRoot":"","sourcesContent":["import {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n  /** Screenreader label for the button. */\n   ariaLabel: string = 'Close dialog';\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close]',\n  host: {\n    '(click)': 'dialogRef.close()',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title]',\n  host: {\n    '[class.mat-dialog-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n  host: {\n    '[class.mat-dialog-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n  host: {\n    '[class.mat-dialog-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}