{"version":3,"sources":["../../../../src/lib/dialog/dialog-content-directives.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAM,MAAA,eAAA,CAAA;AACzB,OAAO,EAAA,WAAE,EAAW,MAAA,cAAA,CAAA;AACpB;;GAEG;AACH,MAGC;IAED;;OAEG;IACH,YADqB,SAA2B;QAA3B,cAAA,GAAA,SAAA,CAA2B;QANhD;;WAEG;QACH,cACI,GAAA,cAAA,CAAA;IAE6C,CAAA;;AAC1C,wBAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAEvB,QAAQ,EADE,mDAAA;gBAEV,IAAI,EADE;oBAEJ,SAAS,EADE,mBAAA;oBAEX,mBAAmB,EADE,WAAA;oBAErB,MAAM,EADE,QAAA;iBAET;aACF,EADC,EAAG;CAEJ,CADC;AAEF;;GAEG;AAFF,4BAAA,GAAA,MAAA;IAID,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CAAC;AAFK,4BAAA,GAAyD;IAIhE,WAAW,EAHE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,YAAE,EAAY,EAAG,EAAE;CAIrD,CAHC;AAMF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,cAAc,CAAC;IAC7B;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;AAClC,CAAC;AAED;;GAEG;AACH,MArBC;;AAAmC,wBAAA,GAAoC;IAsBxE,EArBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAsBvB,QAAQ,EArBE,uCAAA;gBAsBV,IAAI,EArBE;oBAsBJ,0BAA0B,EArBE,MAAA;iBAsB7B;aACF,EArBC,EAAG;CAsBJ,CArBC;AAsBF;;GAEG;AAtBF,4BAAA,GAAA,MAAA,EAwBA,CAAC;AAGF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;AAC7B,CAAC;AAED;;GA1BiC;AA6BjC,MA/BC;;AAAqC,0BAAA,GAAoC;IAgC1E,EA/BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAgCvB,QAAQ,EA/BE,kFAAA;gBAgCV,IAAI,EA/BE;oBAgCJ,4BAA4B,EA/BE,MAAA;iBAgC/B;aACF,EA/BC,EAAG;CAgCJ,CA/BC;AAgCF;;GAEG;AAhCF,8BAAA,GAAA,MAAA,EAkCA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH,MAzCC;;AAAqC,0BAAA,GAAoC;IA0C1E,EAzCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA0CvB,QAAQ,EAzCE,kFAAA;gBA0CV,IAAI,EAzCE;oBA0CJ,4BAA4B,EAzCE,MAAA;iBA0C/B;aACF,EAzCC,EAAG;CA0CJ,CAzCC;AA0CF;;GAEG;AA1CF,8BAAA,GAAA,MAAA,EA4CA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC","file":"dialog-content-directives.js","sourceRoot":"","sourcesContent":["import {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close]',\n  host: {\n    '(click)': 'dialogRef.close()',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title]',\n  host: {\n    '[class.mat-dialog-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n  host: {\n    '[class.mat-dialog-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n  host: {\n    '[class.mat-dialog-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}