{"version":3,"sources":["../../../../src/lib/dialog/dialog-ref.ts"],"names":[],"mappings":"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","file":"dialog-ref.js","sourceRoot":"","sourcesContent":["import {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport'rxjs/add/operator/filter';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\npublic _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange\n      .filter((event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this.componentInstance = null;\n      }, null, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._exit();\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n"]}