{"version":3,"sources":["../../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,SAAS,EACT,eAAe,EAEf,KAAK,EAEL,WAAW,EACX,SAAS,EACT,iBAAiB,EACjB,iBAAiB,GAClB,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAA,QAAE,EAAQ,MAAA,SAAA,CAAA;AACjB,OAAO,EAAA,0BAAE,EAA0B,MAAA,2CAAA,CAAA;AACnC;;;GAGG;AACH,IACC,4BAAA,GAAA,CAAA,CAAA;AAED,MAGC;IAsBD;;OAEG;IACH,YAJsB,kBAAoB;QAApB,uBAAA,GAAA,kBAAA,CAAoB;QAnB1C;;WAEG;QACH,cACG,GAAA,OAAA,CAAA;QAAH;;WAEG;QACH,cAAG,GAAA,KAAA,CAAA;QASH;;WAEG;QACH,OAFG,GAAA,mBAAA,4BAAA,EAAA,EAAA,CAAA;IAEyD,CAAA;IAK5D;;OAEG;IACH,kBANG;QAOC,IAAI,CANC,WAAC,GAAa,IAAI,0BAAA,CAA2B,IAAC,CAAI,OAAC,CAAO,CAAC,QAAC,EAAQ,CAAE;IAO7E,CAAC;IACH;;;;;OAKG;IACH,aAPG,CAAA,SAAA;QAQC,EAAE,CAAC,CAAC,IAPC,CAAI,KAAC,CAAK,CAAC,CAAA;YAQd,IAAI,CAPC,KAAC,CAAK,aAAC,CAAa,SAAC,GAAW,SAAA,CAAU;QAQjD,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,cATG;QAUC,OAAO,CATC,OAAC,EAAO,CAAE,IAAC,CAAI;YAUrB,IAAI,CATC,SAAC,GAAW,CAAA,CAAE,IAAC,CAAI,OAAC,CAAO,MAAC,CAAM;YAUvC,IAAI,CATC,kBAAC,CAAkB,YAAC,EAAY,CAAE;QAUzC,CAAC,CATC,CAAC;IAUL,CAAC;IACH;;;OAGG;IACH,aAXG;QAYC,MAAM,CAXC;YAYL,8BAA8B,EAXE,IAAA,CAAK,SAAC,KAAa,OAAA;YAYnD,8BAA8B,EAXE,IAAA,CAAK,SAAC,KAAa,OAAA;YAYnD,0BAA0B,EAXE,IAAA,CAAK,SAAC;YAYlC,yBAAyB,EAXE,CAAA,IAAE,CAAI,SAAC;SAYnC,CAXC;IAYJ,CAAC;;AATI,yBAAA,GAAoC;IAY3C,EAXE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAYvB,QAAQ,EAXE,MAAA,CAAO,EAAC;gBAYlB,QAAQ,EAXE,mCAAA;gBAYV,WAAW,EAXE,mBAAA;gBAYb,SAAS,EAXE,CAAA,kBAAE,CAAkB;gBAY/B,aAAa,EAXE,iBAAA,CAAkB,IAAC;gBAYlC,QAAQ,EAXE,gBAAA;gBAYV,IAAI,EAXE;oBAYJ,0BAA0B,EAXE,MAAA;iBAY7B;aACF,EAXC,EAAG;CAYJ,CAXC;AAYF;;GAEG;AAZF,6BAAA,GAAA,MAAA;IAcD,EAAC,IAAI,EAAE,iBAAiB,GAAG;CAC1B,CAAC;AAZK,6BAAA,GAAyD;IAchE,UAAU,EAbE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,WAAE,EAAW,EAAG,EAAE;IAcxD,OAAO,EAbE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IAcjD,SAAS,EAbE,CAAA,EAAG,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IAc1D,aAAa,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAc/B,CAbC;AAgBF;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,cAAc,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;IACnC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;IAC/B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC;IAC5B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC5C,CAAC","file":"autocomplete.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}