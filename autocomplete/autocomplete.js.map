{"version":3,"sources":["../../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":"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","file":"autocomplete.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet /** @type {?} */ _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager;\n\n  /** Whether the autocomplete panel displays above or below its trigger. */\n  positionY: AutocompletePositionY = 'below';\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n   displayWith: (value: any) => string;\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => this.showPanel = !!this.options.length);\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}