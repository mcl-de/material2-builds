{"version":3,"sources":["../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"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","file":"autocomplete-trigger.js","sourceRoot":"","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Input,\n    NgZone,\n    Optional,\n    OnDestroy,\n    ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\nimport {MdInputContainer} from '../input/input-container';\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const /** @type {?} */ AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const /** @type {?} */ AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\nprivate _panelPositionSubscription: Subscription;\nprivate _positionStrategy: ConnectedPositionStrategy;\nprivate _blurStream = new Subject<any>();\nprivate _manuallyFloatingPlaceholder = false;\n\n  /** View -> model callback called when value changes */\n  _onChange = (value: any) => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n        this.optionSelections,\n        this._blurStream.asObservable(),\n        this.autocomplete._keyManager.tabOut\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      this.autocomplete._keyManager.onKeydown(event);\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this.openPanel();\n        Promise.resolve().then(() => this._scrollToOption());\n      }\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @param {?} newlyFocusedTag\n * @return {?}\n */\n_handleBlur(newlyFocusedTag: string): void {\n    this._onTouched();\n\n    // Only emit blur event if the new focus is *not* on an option.\n    if (newlyFocusedTag !== 'MD-OPTION') {\n      this._blurStream.next(null);\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Stream of blur events that should close the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._blurStream;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}