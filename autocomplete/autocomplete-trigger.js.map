{"version":3,"sources":["../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,UAAU,EACV,IAAI,EACJ,KAAK,EACL,MAAM,EACN,QAAQ,EAER,gBAAgB,EAChB,MAAM,EACN,iBAAiB,GAClB,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAuB,iBAAA,EAAkB,MAAA,gBAAA,CAAA;AAChD,OAAO,EAAA,QAAE,EAAQ,MAAA,2BAAA,CAAA;AACjB,OAAO,EAAA,OAAE,EAAoB,YAAA,EAAc,cAAA,EAAe,MAAA,SAAA,CAAA;AAI1D,OAAO,EAAA,UAAE,EAAU,MAAA,iBAAA,CAAA;AAEnB,OAAO,EAAA,KAAE,EAAM,QAAA,EAAU,UAAA,EAAW,MAAA,2BAAA,CAAA;AACpC,OAAO,EAAA,GAAE,EAAG,MAAA,iBAAA,CAAA;AACZ,OAAO,EAAA,gBAAE,EAAgB,MAAA,0BAAA,CAAA;AAEzB,OAAM,2BAAC,CAAA;AACP,OAAM,+BAAC,CAAA;AACP,OAAM,0BAAC,CAAA;AACP,OAAM,6BAAC,CAAA;AACP,OAAM,6BAAC,CAAA;AACP;;GAEG;AACH,MAKC,CAAA,MAAA,0BAAA,GAAA,EAAA,CAAA;AAJD;;GAEG;AACH,MAIC,CAAA,MAAA,yBAAA,GAAA,GAAA,CAAA;AAHD;;;GAGG;AACH,MAKC,CAAA,MAAA,8BAAA,GAAA;IAJC,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,qBAAqB,CAAC;IACpD,KAAK,EAAE,IAAI;CACZ,CAAC;AACF,MAOC;IA+BD;;;;;;;;;OASG;IACH,YATsB,QAAU,EAAoB,QAAU,EACxC,iBAAmB,EACnB,kBAAoB,EACnB,IAAM,EAAa,KAAO,EACzB,eAAiB,EACjB,SAAW;QALb,aAAA,GAAA,QAAA,CAAU;QAAoB,aAAA,GAAA,QAAA,CAAU;QACxC,sBAAA,GAAA,iBAAA,CAAmB;QACnB,uBAAA,GAAA,kBAAA,CAAoB;QACnB,SAAA,GAAA,IAAA,CAAM;QAAa,UAAA,GAAA,KAAA,CAAO;QACzB,oBAAA,GAAA,eAAA,CAAiB;QACjB,cAAA,GAAA,SAAA,CAAW;QAlCzB,eAAA,GAAsB,KAAA,CAAM;QADtC;;WAEG;QAOA,iCAAA,GAAA,KAAA,CAAA;QALH;;WAEG;QACH,cAKG,GAAA,CAAA,KAAA,OAAA,CAAA,CAAA;QAJH;;WAEG;QACH,eAIG,GAAA,QAAA,CAAA,CAAA;IAoBoC,CAAA;IApBvC;;;OAGG;IACH,IAGG,gBAAA;QAFC,MAAM,CAGC,IAAA,CAAK,YAAC,CAAY;IAF3B,CAAC;IACH;;;OAGG;IACH,IAAG,gBAAA,CAAA,YAAA;QACC,IAAI,CAAC,YAAC,GAAc,YAAA,CAAa;IACnC,CAAC;IAmBH;;OAEG;IACH,WAbG;QAcC,EAAE,CAAC,CAAC,IAbC,CAAI,0BAAC,CAA0B,CAAC,CAAA;YAcnC,IAAI,CAbC,0BAAC,CAA0B,WAAC,EAAW,CAAE;QAchD,CAAC;QAED,IAAI,CAbC,aAAC,EAAa,CAAE;IAcvB,CAAC;IACH;;OAEG;IACH,IAdG,SAAA;QAeC,MAAM,CAdC,IAAA,CAAK,UAAC,IAAa,IAAA,CAAK,YAAC,CAAY,SAAC,CAAS;IAexD,CAAC;IACH;;;OAGG;IACH,SAhBG;QAiBC,EAAE,CAAC,CAAC,CAhBC,IAAC,CAAI,WAAC,CAAW,CAAC,CAAA;YAiBrB,IAAI,CAhBC,cAAC,EAAc,CAAE;QAiBxB,CAAC;QAhBC,IAAA,CAAK,CAAA;YAiBL,iEAAiE;YACjE,IAAI,CAhBC,WAAC,CAAW,QAAC,EAAQ,CAAE,KAAC,GAAO,IAAA,CAAK,aAAC,EAAa,CAAE;QAiB3D,CAAC;QAED,EAAE,CAAC,CAAC,CAhBC,IAAC,CAAI,WAAC,CAAW,WAAC,EAAW,CAAE,CAAC,CAAA;YAiBnC,IAAI,CAhBC,WAAC,CAAW,MAAC,CAAM,IAAC,CAAI,OAAC,CAAO,CAAC;YAiBtC,IAAI,CAhBC,0BAAC,EAA0B,CAAE;QAiBpC,CAAC;QAED,IAAI,CAhBC,YAAC,CAAY,cAAC,EAAc,CAAE;QAiBnC,IAAI,CAhBC,iBAAC,EAAiB,CAAE;QAiBzB,IAAI,CAhBC,UAAC,GAAY,IAAA,CAAK;IAiBzB,CAAC;IACH;;;OAGG;IACH,UAlBG;QAmBC,EAAE,CAAC,CAAC,IAlBC,CAAI,WAAC,IAAc,IAAA,CAAK,WAAC,CAAW,WAAC,EAAW,CAAE,CAAC,CAAA;YAmBtD,IAAI,CAlBC,WAAC,CAAW,MAAC,EAAM,CAAE;QAmB5B,CAAC;QAED,IAAI,CAlBC,UAAC,GAAY,KAAA,CAAM;QAmBxB,IAAI,CAlBC,iBAAC,EAAiB,CAAE;QAoBzB,wDAAwD;QACxD,wDAAwD;QACxD,sDAAsD;QACtD,uBAAuB;QACvB,IAAI,CAlBC,kBAAC,CAAkB,aAAC,EAAa,CAAE;IAmB1C,CAAC;IACH;;;;OAIG;IACH,IAlBG,mBAAA;QAmBC,MAAM,CAlBC,UAAA,CAAW,KAAC,CAmBjB,IAAI,CAlBC,gBAAC,EAmBN,IAAI,CAlBC,YAAC,CAAY,WAAC,CAAW,MAAC,EAmB/B,IAAI,CAlBC,mBAAC,CAmBP,CAlBC;IAmBJ,CAAC;IACH;;;OAGG;IACH,IApBG,gBAAA;QAqBC,MAAM,CApBC,UAAA,CAAW,KAAC,CAAK,GAAC,IAAG,CAAI,YAAC,CAAY,OAAC,CAAO,GAAC,CAAG,MAAC,IAAS,MAAA,CAAO,iBAAC,CAAiB,CAAC,CAAC;IAqBhG,CAAC;IACH;;;OAGG;IACH,IAtBG,YAAA;QAuBC,EAAE,CAAC,CAAC,IAtBC,CAAI,YAAC,CAAY,WAAC,CAAW,CAAC,CAAA;YAuBjC,MAAM,CAAiB,CAtBhB,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAc,CAAA,CAAS;QAuB9D,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IAxBG,mBAAA;QAyBC,EAAE,CAAC,CAAC,IAxBC,CAAI,SAAC,CAAS,CAAC,CAAA;YAyBlB,MAAM,CAxBC,UAAA,CAAW,SAAC,CAAS,IAAC,CAAI,SAAC,EAAU,OAAA,CAAQ,CAAC,MAAC,CAAM,CAAC,KAAO;gBAyBlE,IAAI,gBAAgB,CAxBhB,WAAA,GAAY,CAAE,KAAA,CAAM,MAAU,CAAA,CAAY;gBAyB9C,MAAM,CAxBC,IAAA,CAAK,UAAC;oBAyBN,CAAC,IAxBC,CAAI,eAAC,CAAe,WAAC,CAAW,aAAC,CAAa,QAAC,CAAQ,WAAC,CAAW;oBAyBrE,CAAC,IAxBC,CAAI,WAAC,CAAW,cAAC,CAAc,QAAC,CAAQ,WAAC,CAAW,CAAC;YAyBhE,CAAC,CAxBC,CAAC;QAyBL,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IACH,UAxBG,CAAA,KAAA;QAyBC,OAAO,CAxBC,OAAC,CAAO,IAAC,CAAI,CAAC,IAAC,CAAI,MAAM,IAAA,CAAK,gBAAC,CAAgB,KAAC,CAAK,CAAC,CAAC;IAyBjE,CAAC;IACH;;;;;;;OAOG;IACH,gBAxBG,CAAA,EAAA;QAyBC,IAAI,CAxBC,SAAC,GAAW,EAAA,CAAG;IAyBtB,CAAC;IACH;;;;;;;OAOG;IACH,iBAxBG,CAAA,EAAA;QAyBC,IAAI,CAxBC,UAAC,GAAY,EAAA,CAAG;IAyBvB,CAAC;IACH;;;OAGG;IACH,cA3BG,CAAA,KAAA;QA4BC,EAAE,CAAC,CAAC,IA3BC,CAAI,YAAC,IAAe,KAAA,CAAM,OAAC,KAAW,KAAA,CAAM,CAAC,CAAA;YA4BhD,IAAI,CA3BC,YAAC,CAAY,qBAAC,EAAqB,CAAE;YA4B1C,KAAK,CA3BC,cAAC,EAAc,CAAE;QA4BzB,CAAC;QA3BC,IAAA,CAAK,CAAA;YA4BL,MAAM,gBAAgB,CA3BhB,cAAA,GAAiB,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAC,CAAU;YA4BhE,MAAM,gBAAgB,CA3BhB,UAAA,GAAa,KAAA,CAAM,OAAC,KAAW,QAAA,IAAY,KAAA,CAAM,OAAC,KAAW,UAAA,CAAW;YA6B9E,IAAI,CA3BC,YAAC,CAAY,WAAC,CAAW,SAAC,CAAS,KAAC,CAAK,CAAC;YA6B/C,EAAE,CAAC,CAAC,UA3BC,CAAU,CAAC,CAAA;gBA4Bd,IAAI,CA3BC,SAAC,EAAS,CAAE;YA4BnB,CAAC;YAED,OAAO,CA3BC,OAAC,EAAO,CAAE,IAAC,CAAI;gBA4BrB,EAAE,CAAC,CAAC,UA3BC,IAAa,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAC,KAAc,cAAA,CAAe,CAAC,CAAA;oBA4B7E,IAAI,CA3BC,eAAC,EAAe,CAAE;gBA4BzB,CAAC;YACH,CAAC,CA3BC,CAAC;QA4BL,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,YA9BG,CAAA,KAAA;QA+BC,gFAAgF;QAChF,gEAAgE;QAChE,4DAA4D;QAC5D,EAAE,CAAC,CAAC,QA9BC,CAAQ,aAAC,KAAiB,KAAA,CAAM,MAAC,CAAM,CAAC,CAAA;YA+B3C,IAAI,CA9BC,SAAC,CAAS,CAAC,CAAA,KAAC,CAAK,MAAU,CAAA,CAAiB,CAAC,KAAC,CAAK,CAAC;YA+BzD,IAAI,CA9BC,SAAC,EAAS,CAAE;QA+BnB,CAAC;IACH,CAAC;IACH;;;;;OAKG;IA7BA,iBAAA;QA+BC,EAAE,CAAC,CAAC,IA9BC,CAAI,eAAC,IAAkB,IAAA,CAAK,eAAC,CAAe,gBAAC,KAAoB,MAAA,CAAO,CAAC,CAAA;YA+B5E,IAAI,CA9BC,eAAC,CAAe,gBAAC,GAAkB,QAAA,CAAS;YA+BjD,IAAI,CA9BC,4BAAC,GAA8B,IAAA,CAAK;QA+B3C,CAAC;IACH,CAAC;IACH;;;OAGG;IA/BA,iBAAA;QAiCC,EAAE,CAAC,CAAC,IAhCC,CAAI,4BAAC,CAA4B,CAAC,CAAA;YAiCrC,IAAI,CAhCC,eAAC,CAAe,gBAAC,GAAkB,MAAA,CAAO;YAiC/C,IAAI,CAhCC,4BAAC,GAA8B,KAAA,CAAM;QAiC5C,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IA/BA,eAAA;QAiCC,MAAM,gBAAgB,CAhChB,YAAA,GAiCF,IAAI,CAhCC,YAAC,CAAY,WAAC,CAAW,eAAC,GAAiB,0BAAA,CAA2B;QAiC/E,MAAM,gBAAgB,CAhChB,YAAA,GAiCF,IAAI,CAhCC,GAAC,CAAG,CAAC,EAAE,YAAA,GAAe,yBAAA,GAA4B,0BAAA,CAA2B,CAAC;QAiCvF,IAAI,CAhCC,YAAC,CAAY,aAAC,CAAa,YAAC,CAAY,CAAC;IAiChD,CAAC;IACH;;;;OAIG;IA/BA,0BAAA;QAiCC,yEAAyE;QACzE,UAAU,CAhCC,KAAC,CAAK,IAAC,CAAI,KAAC,CAAK,QAAC,CAAQ,KAAC,EAAK,EAAG,IAAA,CAAK,YAAC,CAAY,OAAC,CAAO,OAAC,CAAO;aAmC3E,SAhCC,CAAS;YAiCT,IAAI,CAhCC,WAAC,EAAW,CAAE;YAiCnB,MAAM,CAhCC,IAAA,CAAK,mBAAC,CAAmB;QAiClC,CAAC,CAhCC;aAkCD,KAhCC,EAAK;aAkCN,SAhCC,CAAS,KAAC,IAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK,CAAC,CAAC;IAiCzD,CAAC;IACH;;;OAGG;IAjCA,aAAA;QAmCC,EAAE,CAAC,CAAC,IAlCC,CAAI,WAAC,CAAW,CAAC,CAAA;YAmCpB,IAAI,CAlCC,UAAC,EAAU,CAAE;YAmClB,IAAI,CAlCC,WAAC,CAAW,OAAC,EAAO,CAAE;YAmC3B,IAAI,CAlCC,WAAC,GAAa,IAAA,CAAK;QAmC1B,CAAC;IACH,CAAC;IACH;;;OAGG;IApCA,gBAAA,CAAA,KAAA;QAsCC,MAAM,gBAAgB,CArChB,SAAA,GAAY,IAAA,CAAK,YAAC,CAAY,WAAC,GAAa,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,KAAC,CAAK,GAAG,KAAA,CAAM;QAsC/F,IAAI,CArCC,QAAC,CAAQ,aAAC,CAAa,KAAC,GAAO,SAAA,IAAa,EAAA,CAAG;IAsCtD,CAAC;IACH;;;;;;OAMG;IArCA,iBAAA,CAAA,KAAA;QAuCC,EAAE,CAAC,CAAC,KAtCC,IAAQ,KAAA,CAAM,MAAC,CAAM,CAAC,CAAA;YAuCzB,IAAI,CAtCC,4BAAC,CAA4B,KAAC,CAAK,MAAC,CAAM,CAAC;YAuChD,IAAI,CAtCC,gBAAC,CAAgB,KAAC,CAAK,MAAC,CAAM,KAAC,CAAK,CAAC;YAuC1C,IAAI,CAtCC,SAAC,CAAS,KAAC,CAAK,MAAC,CAAM,KAAC,CAAK,CAAC;QAuCrC,CAAC;QAED,IAAI,CAtCC,UAAC,EAAU,CAAE;IAuCpB,CAAC;IACH;;;;OAIG;IAtCA,4BAAA,CAAA,IAAA;QAwCC,IAAI,CAvCC,YAAC,CAAY,OAAC,CAAO,OAAC,CAAO,CAAC,MAAC;YAwClC,EAAE,CAAC,CAAC,MAvCC,IAAS,IAAA,IAAQ,MAAA,CAAO,QAAC,CAAQ,CAAC,CAAA;gBAwCrC,MAAM,CAvCC,QAAC,EAAQ,CAAE;YAwCpB,CAAC;QACH,CAAC,CAvCC,CAAC;IAwCL,CAAC;IACH;;OAEG;IAxCA,cAAA;QA0CC,IAAI,CAzCC,OAAC,GAAS,IAAI,cAAA,CAAe,IAAC,CAAI,YAAC,CAAY,QAAC,EAAS,IAAA,CAAK,iBAAC,CAAiB,CAAC;QA0CtF,IAAI,CAzCC,WAAC,GAAa,IAAA,CAAK,QAAC,CAAQ,MAAC,CAAM,IAAC,CAAI,iBAAC,EAAiB,CAAE,CAAC;IA0CpE,CAAC;IACH;;OAEG;IA1CA,iBAAA;QA4CC,MAAM,gBAAgB,CA3ChB,YAAA,GAAe,IAAI,YAAA,EAAa,CAAE;QA4CxC,YAAY,CA3CC,gBAAC,GAAkB,IAAA,CAAK,mBAAC,EAAmB,CAAE;QA4C3D,YAAY,CA3CC,KAAC,GAAO,IAAA,CAAK,aAAC,EAAa,CAAE;QA4C1C,YAAY,CA3CC,SAAC,GAAW,IAAA,CAAK,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,KAAC,GAAO,KAAA,CAAM;QA4C7D,MAAM,CA3CC,YAAA,CAAa;IA4CtB,CAAC;IACH;;OAEG;IA5CA,mBAAA;QA8CC,IAAI,CA7CC,iBAAC,GAAmB,IAAA,CAAM,QAAC,CAAQ,QAAC,EAAQ,CAAE,WAAC,CA8ChD,IAAI,CA7CC,QAAC,EA8CN,EAAC,OA7CC,EAAQ,OAAA,EAAS,OAAA,EAAS,QAAA,EAAS,EAAE,EAAA,QAAE,EAAS,OAAA,EAAS,QAAA,EAAU,KAAA,EAAM,CAAC;aA8C3E,oBA7CC,CA8CE,EAAC,OA7CC,EAAQ,OAAA,EAAS,OAAA,EAAS,KAAA,EAAM,EAAE,EAAA,QAAE,EAAS,OAAA,EAAS,QAAA,EAAU,QAAA,EAAS,CA8C9E,CA7CC;QA8CN,IAAI,CA7CC,2BAAC,CAA2B,IAAC,CAAI,iBAAC,CAAiB,CAAC;QA8CzD,MAAM,CA7CC,IAAA,CAAK,iBAAC,CAAiB;IA8ChC,CAAC;IACH;;;;;OAKG;IA7CA,2BAAA,CAAA,QAAA;QA+CC,IAAI,CA9CC,0BAAC,GAA4B,QAAA,CAAS,gBAAC,CAAgB,SAAC,CAAS,MAAC;YA+CrE,IAAI,CA9CC,YAAC,CAAY,SAAC,GAAW,MAAA,CAAO,cAAC,CAAc,OAAC,KAAW,KAAA,GAAQ,OAAA,GAAU,OAAA,CAAQ;QA+C5F,CAAC,CA9CC,CAAC;IA+CL,CAAC;IACH;;;OAGG;IA/CA,aAAA;QAiDC,MAAM,CAhDC,IAAA,CAAK,QAAC,CAAQ,aAAC,CAAa,qBAAC,EAAqB,CAAE,KAAC,CAAK;IAiDnE,CAAC;IACH;;;OAGG;IAjDA,gBAAA;QAmDC,IAAI,CAlDC,YAAC,CAAY,WAAC,CAAW,aAAC,CAAa,IAAC,CAAI,CAAC;IAmDpD,CAAC;IACH;;;;OAIG;IAjDA,WAAA;QAmDC,IAAI,CAlDC,gBAAC,EAAgB,CAAE;QAmDxB,IAAI,CAlDC,iBAAC,CAAiB,uBAAC,EAAuB,CAAE;QAmDjD,IAAI,CAlDC,YAAC,CAAY,cAAC,EAAc,CAAE;IAmDrC,CAAC;;AAhDI,gCAAA,GAAoC;IAmD3C,EAlDE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAmDvB,QAAQ,EAlDE,+CAAA;gBAmDV,IAAI,EAlDE;oBAmDJ,MAAM,EAlDE,UAAA;oBAmDR,cAAc,EAlDE,KAAA;oBAmDhB,mBAAmB,EAlDE,MAAA;oBAmDrB,gBAAgB,EAlDE,OAAA;oBAmDlB,8BAA8B,EAlDE,kBAAA;oBAmDhC,sBAAsB,EAlDE,sBAAA;oBAmDxB,kBAAkB,EAlDE,kBAAA;oBAmDpB,SAAS,EAlDE,aAAA;oBAmDX,SAAS,EAlDE,sBAAA;oBAmDX,QAAQ,EAlDE,cAAA;oBAmDV,WAAW,EAlDE,wBAAA;iBAmDd;gBACD,SAAS,EAlDE,CAAA,8BAAE,CAA8B;aAmD5C,EAlDC,EAAG;CAmDJ,CAlDC;AAmDF;;GAEG;AAnDF,oCAAA,GAAA,MAAA;IAqDD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,OAAO,GAAG;IACjB,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IAC/C,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAG,EAAC;IAC5E,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAG,EAAC;CAC1F,CAAC;AAnDK,oCAAA,GAAyD;IAqDhE,cAAc,EApDE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,gBAAE,EAAgB,EAAG,EAAE;IAqD7D,kBAAkB,EApDE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,iBAAE,EAAiB,EAAG,EAAE;CAqDjE,CApDC;AAuDF;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,cAAc,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC5C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,0BAA0B,CAAC;IAC3D,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAClD;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,4BAA4B,CAAC;IAC7D;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC1C;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAAC;IAC7C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAClD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,kBAAkB,CAAC;IACnD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;IAChD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,SAAS,CAAC;AAC1C,CAAC","file":"autocomplete-trigger.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        let /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        return this._panelOpen &&\n               !this._inputContainer._elementRef.nativeElement.contains(clickTarget) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}