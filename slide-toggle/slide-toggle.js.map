{"version":3,"sources":["../../../../src/lib/slide-toggle/slide-toggle.ts"],"names":[],"mappings":"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","file":"slide-toggle.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Renderer,\n  forwardRef,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  AfterContentInit,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  HammerInput,\n  FocusOriginMonitor,\n  FocusOrigin,\n  MdRipple,\n  RippleRef\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\n/**\n * Two-state control, which can be also called `switch`.\n */\nexport class MdSlideToggle implements OnDestroy, AfterContentInit, ControlValueAccessor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _color: string;\nprivate _isMousedown: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _disabled: boolean = false;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\nprivate _focusRipple: RippleRef;\n\n  /** Name value will be applied to the input element if present */\n   name: string = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n   id: string = this._uniqueId;\n\n  /** Used to specify the tabIndex value for the underlying input element. */\n   tabIndex: number = 0;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n   labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n   ariaLabel: string = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n   ariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _change: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n   change: Observable<MdSlideToggleChange> = this._change.asObservable();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n   _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n   _ripple: MdRipple;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * @return {?}\n */\n_setMousedown() {\n    // We only *show* the focus style when focus has come to the button via the keyboard.\n    // The Material Design spec is silent on this topic, and without doing this, the\n    // button continues to look :active after clicking.\n    // @see http://marcysutton.com/button-focus-hell/\n    this._isMousedown = true;\n    setTimeout(() => this._isMousedown = false, 100);\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'program');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * The color of the slide-toggle. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this._change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    '[class.mat-slide-toggle]': 'true',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '(mousedown)': '_setMousedown()'\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._color;\n/** @type {?} */\nMdSlideToggle.prototype._isMousedown;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._disabled;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/** @type {?} */\nMdSlideToggle.prototype._change;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._elementRef;\n/** @type {?} */\nMdSlideToggle.prototype._renderer;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\nprivate _thumbEl: HTMLElement;\nprivate _thumbBarEl: HTMLElement;\nprivate _thumbBarWidth: number;\nprivate _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}