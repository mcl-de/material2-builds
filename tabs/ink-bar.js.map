{"version":3,"sources":["../../../../src/lib/tabs/ink-bar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,QAAA,EAAU,UAAA,EAAY,MAAA,EAAO,MAAA,eAAA,CAAA;AAChD;;;GAGG;AACH,MAGC;IAFD;;;;OAIG;IACH,YADY,SAAW,EACX,WAAa,EACb,OAAS;QAFT,cAAA,GAAA,SAAA,CAAW;QACX,gBAAA,GAAA,WAAA,CAAa;QACb,YAAA,GAAA,OAAA,CAAS;IAAO,CAAA;IAG5B;;;;;OAKG;IACH,cAFG,CAAA,OAAA;QAGC,IAAI,CAFC,IAAC,EAAI,CAAE;QAIZ,IAAI,CAFC,OAAC,CAAO,iBAAC,CAAiB;YAG7B,qBAAqB,CAFC;gBAGpB,IAAI,CAFC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,MAAA,EAG3D,IAAI,CAFC,gBAAC,CAAgB,OAAC,CAAO,CAAC,CAAC;gBAGpC,IAAI,CAFC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,OAAA,EAG3D,IAAI,CAFC,gBAAC,CAAgB,OAAC,CAAO,CAAC,CAAC;YAGtC,CAAC,CAFC,CAAC;QAGL,CAAC,CAFC,CAAC;IAGL,CAAC;IACH;;;OAGG;IACH,IAJG;QAKC,IAAI,CAJC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,YAAA,EAAc,SAAA,CAAU,CAAC;IAK1F,CAAC;IACH;;;OAGG;IACH,IANG;QAOC,IAAI,CANC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,YAAA,EAAc,QAAA,CAAS,CAAC;IAOzF,CAAC;IACH;;;;OAIG;IALA,gBAAA,CAAA,OAAA;QAOC,MAAM,CANC,OAAA,GAAU,OAAA,CAAQ,UAAC,GAAY,IAAA,GAAO,GAAA,CAAI;IAOnD,CAAC;IACH;;;;OAIG;IALA,gBAAA,CAAA,OAAA;QAOC,MAAM,CANC,OAAA,GAAU,OAAA,CAAQ,WAAC,GAAa,IAAA,GAAO,GAAA,CAAI;IAOpD,CAAC;;AALI,mBAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAOvB,QAAQ,EANE,yBAAA;gBAOV,IAAI,EANE;oBAOJ,qBAAqB,EANE,MAAA;iBAOxB;aACF,EANC,EAAG;CAOJ,CANC;AAOF;;GAEG;AAPF,uBAAA,GAAA,MAAA;IASD,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,CAAC;AAGF;IACA,gBAAgB;IAChB,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAGG;IACH,QAAQ,CAAC,cAAc,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;AAC3B,CAAC","file":"ink-bar.js","sourceRoot":"","sourcesContent":["import {Directive, Renderer, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    '[class.mat-ink-bar]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}