{"version":3,"sources":["../../../../src/lib/tabs/tab-label-wrapper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,UAAA,EAAY,QAAA,EAAU,KAAA,EAAM,MAAA,eAAA,CAAA;AAC/C,OAAO,EAAA,qBAAE,EAAqB,MAAA,mCAAA,CAAA;AAC9B;;;GAGG;AACH,MAGC;IAFD;;;OAGG;IACH,YADqB,UAAY,EAAoB,SAAW;QAA3C,eAAA,GAAA,UAAA,CAAY;QAAoB,cAAA,GAAA,SAAA,CAAW;QAGtD,cAAA,GAAqB,KAAA,CAAM;IAHoC,CAAA;IAIzE;;;OAGG;IACH,IADG,QAAA,KAAgB,MAAA,CAAO,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;IAE1C;;;OAGG;IACH,IALG,QAAA,CAAA,KAAA,IAA0B,IAAA,CAAK,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;IAM5E;;;OAGG;IACH,KAPG;QAQC,IAAI,CAPC,SAAC,CAAS,mBAAC,CAAmB,IAAC,CAAI,UAAC,CAAU,aAAC,EAAc,OAAA,CAAQ,CAAC;IAQ7E,CAAC;IACH;;OAEG;IACH,aATG;QAUC,MAAM,CATC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,UAAC,CAAU;IAUlD,CAAC;IACH;;OAEG;IACH,cAXG;QAYC,MAAM,CAXC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,WAAC,CAAW;IAYnD,CAAC;;AAVI,4BAAA,GAAoC;IAY3C,EAXE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAYvB,QAAQ,EAXE,iDAAA;gBAYV,IAAI,EAXE;oBAYJ,0BAA0B,EAXE,UAAA;iBAC9B;aAYD,EAXC,EAAG;CAYJ,CAXC;AAYF;;GAEG;AAZF,gCAAA,GAAA,MAAA;IAcD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CAAC;AAZK,gCAAA,GAAyD;IAchE,UAAU,EAbE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAc5B,CAbC;AAgBF;IACA,gBAAgB;IAChB,iBAAiB,CAAC,UAAU,CAAC;IAC7B;;;OAGG;IACH,iBAAiB,CAAC,cAAc,CAAC;IACjC,gBAAgB;IAChB,iBAAiB,CAAC,cAAc,CAAC;IACjC;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,SAAS,CAAC;IACtC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;IACvC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,SAAS,CAAC;AACtC,CAAC","file":"tab-label-wrapper.js","sourceRoot":"","sourcesContent":["import {Directive, ElementRef, Renderer, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper {\n/**\n * @param {?} elementRef\n * @param {?} _renderer\n */\nconstructor(public elementRef: ElementRef,\nprivate _renderer: Renderer) {}\nprivate _disabled: boolean = false;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.propDecorators;\n/**\n * Whether the tab label is disabled.\n * @type {?}\n */\nMdTabLabelWrapper.prototype._disabled;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n/** @type {?} */\nMdTabLabelWrapper.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}