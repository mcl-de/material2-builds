{"version":3,"sources":["../../../../src/lib/grid-list/tile-styler.ts"],"names":[],"mappings":"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","file":"tile-styler.js","sourceRoot":"","sourcesContent":["import {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {MdGridListBadRatioError} from './grid-list-errors';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nexport class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number, gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw new MdGridListBadRatioError(value);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n"]}