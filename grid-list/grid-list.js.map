{"version":3,"sources":["../../../../src/lib/grid-list/grid-list.ts"],"names":[],"mappings":"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","file":"grid-list.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {MdGridListColsError} from './grid-list-errors';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw new MdGridListColsError();\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    '[class.mat-grid-list]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}