{"version":3,"sources":["input/input-container.scss","core/style/_variables.scss","input/input-container.css","core/style/_form-common.scss"],"names":[],"mappings":"AAoBA,qBACE,QAAS,aACT,SAAU,SACV,YClBgB,MAAM,CAAE,gBAAgB,CAAE,WDmB1C,YAAa,OAGb,WAAY,KEnBZ,+BFsBE,WAAY,MAVhB,+BAeI,MAAO,KACP,OAAQ,KACR,UAAW,KACX,eAAgB,IAMpB,mBACE,OAvC0B,IAuCS,EAEnC,eAAgB,IAQlB,iBACE,QAAS,aACT,UAAW,OACX,eAAgB,OAChB,MAAO,KAJT,mBAOI,QAAS,WAIb,iBACE,SAAU,SAIZ,mBAEE,KAAM,QAGN,WAAY,IAGZ,MAAO,aAGP,OAAQ,KACR,QAAS,EACT,QAAS,EACT,MAAO,KAGP,eAAgB,OAEhB,4BACE,WAAY,MEjDZ,sCFoDE,WAAY,KAvBlB,mCA8BI,WAAY,KA9BhB,8EAxDE,QAAS,MACT,UAAW,oBAAoB,WAC/B,MAAO,WA+FL,WAAY,KAzChB,gCAgDI,MAAO,YAhDX,qCAgDI,MAAO,YAhDX,8CAgDI,MAAO,YAhDX,yCAgDI,MAAO,YAOX,uBAGE,SAAU,SACV,KAAM,EACN,IAAK,EAEL,UAAW,KACX,QAAS,EACT,YAAa,IAGb,MAAO,KACP,QAAS,KACT,YAAa,OACb,cAAe,SACf,SAAU,OAEV,UAAW,cACX,iBAAkB,OAAA,KAClB,WAAY,UCjGY,IACO,0BAAgC,CDiGnD,MClGY,IACO,0BAAgC,CDkGnD,MCnGY,IACO,2BD4EjC,iCAyBI,QAAS,MACT,OAAQ,KAImB,8CA9B/B,iDA/GE,QAAS,MACT,UAAW,oBAAoB,WAC/B,MAAO,WEiEP,iCF+EE,iBAAkB,OAAA,MAClB,KAAM,KACN,MAAO,EAMX,uCACE,WAAY,KAKd,+BACE,SAAU,SACV,KAAM,EACN,IAAK,KACL,MAAO,KACP,YAAa,IACb,SAAU,OACV,UAAW,mBAPb,sCAWI,QAAS,GACT,QAAS,aAOb,qBACE,SAAU,SACV,OAAQ,IACR,MAAO,KACP,WAAY,IACZ,iBAAkB,IAClB,iBAAkB,MANpB,kCG1LE,iBAHM,8EAIN,gBAAiB,IAAA,IACjB,kBAAmB,SHkMjB,WAAY,EACZ,oBAAqB,EAXzB,uCAeI,SAAU,SACV,OAAQ,IACR,QAAS,EACT,IAAK,KACL,MAAO,KACP,iBAAkB,IAClB,QAAS,EACT,WAAY,QCvKU,IACO,2BD8J/B,oDAWI,QAAS,EAOf,6BACE,SAAU,SACV,UAAW,IACX,IAAK,KACL,MAAO,KACP,WAjO0B,KAkO1B,SAAU,OAIZ,wBACE,QAAS,KAGX,uBACE,KAAM,EAAE,EA1OiB,KA8O3B,iBACE,QAAS,MAGX,kBAAmB,kBAEjB,MAAO,KACP,YAAa","file":"input-container.css","sourcesContent":["@import '../core/style/variables';\n@import '../core/style/vendor-prefixes';\n@import '../core/style/form-common';\n\n\n$mat-input-floating-placeholder-scale-factor: 0.75 !default;\n$mat-input-wrapper-spacing: 1em !default;\n$mat-input-hint-min-space: 10px !default;\n\n// Gradient for showing the dashed line when the input is disabled.\n$mat-input-underline-disabled-background-image:\n    linear-gradient(to right, rgba(0, 0, 0, 0.26) 0%, rgba(0, 0, 0, 0.26) 33%, transparent 0%);\n\n// Applies a floating placeholder above the input itself.\n@mixin mat-input-placeholder-floating {\n  display: block;\n  transform: translateY(-1.35em) scale($mat-input-floating-placeholder-scale-factor);\n  width: 100% / $mat-input-floating-placeholder-scale-factor;\n}\n\n.mat-input-container {\n  display: inline-block;\n  position: relative;\n  font-family: $mat-font-family;\n  line-height: normal;\n\n  // To avoid problems with text-align.\n  text-align: left;\n\n  [dir='rtl'] & {\n    text-align: right;\n  }\n\n  // Allow icons in a prefix/suffix/hint/etc to adapt to the correct size.\n  & .mat-icon {\n    width: auto;\n    height: auto;\n    font-size: 100%;\n    vertical-align: top;\n  }\n}\n\n// Global wrapper. We need to apply margin to the element for spacing, but\n// cannot apply it to the host element directly.\n.mat-input-wrapper {\n  margin: $mat-input-wrapper-spacing 0;\n  // Account for the underline which has 4px of margin + 2px of border.\n  padding-bottom: 6px;\n}\n\n// We use a table layout to baseline align the prefix and suffix classes.\n// The underline is outside of it so it can cover all of the elements under\n// this table.\n// Flex does not respect the baseline. What we really want is akin to a table\n// as want an inline-block where elements don't wrap.\n.mat-input-table {\n  display: inline-table;\n  flex-flow: column;\n  vertical-align: bottom;\n  width: 100%;\n\n  & > * {\n    display: table-cell;\n  }\n}\n\n.mat-input-infix {\n  position: relative;\n}\n\n// The Input element proper.\n.mat-input-element {\n  // Font needs to be inherited, because by default <input> has a system font.\n  font: inherit;\n\n  // The Material input should match whatever background it is above.\n  background: transparent;\n\n  // If background matches current background then so should the color for proper contrast\n  color: currentColor;\n\n  // By default, <input> has a padding, border, outline and a default width.\n  border: none;\n  outline: none;\n  padding: 0;\n  width: 100%;\n\n  // Needed to make last line of the textarea line up with the baseline.\n  vertical-align: bottom;\n\n  .mat-end & {\n    text-align: right;\n\n    [dir='rtl'] & {\n      text-align: left;\n    }\n  }\n\n  // Undo the red box-shadow glow added by Firefox on invalid inputs.\n  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid\n  &:-moz-ui-invalid {\n    box-shadow: none;\n  }\n\n  // Pseudo-class for Chrome and Safari auto-fill to move the placeholder to\n  // the floating position. This is necessary because these browsers do not actually\n  // fire any events when a form auto-fill is occurring.\n  // Once the autofill is committed, a change event happen and the regular md-input-container\n  // classes take over to fulfill this behaviour.\n  // Assumes the autofill is non-empty.\n  &:-webkit-autofill + .mat-input-placeholder-wrapper .mat-float {\n    @include mat-input-placeholder-floating;\n    transition: none;\n  }\n\n  // Note that we can't use something like visibility: hidden or\n  // display: none, because IE ends up preventing the user from\n  // focusing the input altogether.\n  @include input-placeholder {\n    color: transparent;\n  }\n}\n\n// The placeholder label. This is invisible unless it is. The logic to show it is\n// basically `empty || (float && (!empty || focused))`. Float is dependent on the\n// `floatingPlaceholder` input.\n.mat-input-placeholder {\n  // The placeholder is after the <input>, but needs to be aligned top-left of the\n  // infix <div>.\n  position: absolute;\n  left: 0;\n  top: 0;\n\n  font-size: 100%;\n  z-index: 1;\n  padding-top: 1em;\n\n  // Put ellipsis text overflow.\n  width: 100%;\n  display: none;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n\n  transform: translateY(0);\n  transform-origin: bottom left;\n  transition: transform $swift-ease-out-duration $swift-ease-out-timing-function,\n              color $swift-ease-out-duration $swift-ease-out-timing-function,\n              width $swift-ease-out-duration $swift-ease-out-timing-function;\n\n  &.mat-empty {\n    display: block;\n    cursor: text;\n  }\n\n  // Show the placeholder above the input when it's not empty, or focused.\n  &.mat-float:not(.mat-empty), .mat-focused &.mat-float {\n    @include mat-input-placeholder-floating;\n  }\n\n  [dir='rtl'] & {\n    transform-origin: bottom right;\n    left: auto;\n    right: 0;\n  }\n}\n\n// Disable the placeholder animation when the input is not empty (this prevents placeholder\n// animating up when the value is set programmatically).\n.mat-input-placeholder:not(.mat-empty) {\n  transition: none;\n}\n\n// Used to hide the placeholder overflow on IE, since IE doesn't take transform into account when\n// determining overflow.\n.mat-input-placeholder-wrapper {\n  position: absolute;\n  left: 0;\n  top: -1em;\n  width: 100%;\n  padding-top: 1em;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0); // Prevents the label from shifting after the animation is done.\n\n  // Keeps the element height since the placeholder text is `position: absolute`.\n  &::after {\n    content: '';\n    display: inline-table;\n  }\n}\n\n\n// The underline is what's shown under the input, its prefix and its suffix.\n// The ripple is the blue animation coming on top of it.\n.mat-input-underline {\n  position: absolute;\n  height: 1px;\n  width: 100%;\n  margin-top: 4px;\n  border-top-width: 1px;\n  border-top-style: solid;\n\n  &.mat-disabled {\n    @include mat-control-disabled-underline();\n    border-top: 0;\n    background-position: 0;\n  }\n\n  .mat-input-ripple {\n    position: absolute;\n    height: 2px;\n    z-index: 1;\n    top: -1px;\n    width: 100%;\n    transform-origin: top;\n    opacity: 0;\n    transition: opacity $swift-ease-out-duration $swift-ease-out-timing-function;\n\n    .mat-focused & {\n      opacity: 1;\n    }\n  }\n}\n\n// Wrapper for the hints and error messages. Provides positioning and text size.\n// Note that we're using `top` in order to allow for stacked children to flow downwards.\n.mat-input-subscript-wrapper {\n  position: absolute;\n  font-size: 75%;\n  top: 100%;\n  width: 100%;\n  margin-top: -$mat-input-wrapper-spacing;\n  overflow: hidden; // prevents multi-line errors from overlapping the input\n}\n\n// Clears the floats on the hints. This is necessary for the hint animation to work.\n.mat-input-hint-wrapper {\n  display: flex;\n}\n\n.mat-input-hint-spacer {\n  flex: 1 0 $mat-input-hint-min-space;\n}\n\n// Single error message displayed beneath the input.\n.mat-input-error {\n  display: block;\n}\n\n.mat-input-prefix, .mat-input-suffix {\n  // Prevents the prefix and suffix from stretching together with the container.\n  width: 0.1px;\n  white-space: nowrap;\n}\n","@import '../typography/typography';\n\n\n// Typography\n$mat-body-font-size-base: rem(1.4) !default;\n$mat-font-family: Roboto, 'Helvetica Neue', sans-serif !default;\n\n// Media queries\n// TODO: Find a way to respect media query ranges.\n// TODO: For example the xs-breakpoint should not interfere with the sm-breakpoint.\n$mat-xsmall: 'max-width: 600px';\n$mat-small: 'max-width: 960px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n\n// Overlay z indices.\n\n// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$cdk-z-index-overlay-container: 1000;\n$cdk-z-index-overlay: 1000;\n$cdk-z-index-overlay-backdrop: 1000;\n\n// Background color for all of the backdrops\n$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.6);\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$mat-toggle-padding: 8px !default;\n// Width and height of input toggles\n$mat-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$mat-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$mat-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$mat-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n",null,"\n// Gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n$mat-underline-disabled-background-image:\n        linear-gradient(to right, rgba(0, 0, 0, 0.26) 0%, rgba(0, 0, 0, 0.26) 33%, transparent 0%);\n\n@mixin mat-control-disabled-underline {\n  background-image: $mat-underline-disabled-background-image;\n  background-size: 4px 1px;\n  background-repeat: repeat-x;\n}"]}