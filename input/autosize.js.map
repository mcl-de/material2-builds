{"version":3,"sources":["../../../../src/lib/input/autosize.ts"],"names":[],"mappings":"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","file":"autosize.js","sourceRoot":"","sourcesContent":["import {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @deprecated Use mdAutosizeMinRows\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @deprecated Use mdAutosizeMaxRows\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMinRows(): number { return this.minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) { this.minRows = value; }\n/**\n * Maximum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMaxRows(): number { return this.maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) { this.maxRows = value; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}