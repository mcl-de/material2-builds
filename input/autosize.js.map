{"version":3,"sources":["../../../../src/lib/input/autosize.ts"],"names":[],"mappings":"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","file":"autosize.js","sourceRoot":"","sourcesContent":["import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements OnInit {\n  /** Minimum number of rows for this textarea. */\n   minRows: number;\n/**\n * @return {?}\n */\nget mdAutosizeMinRows(): number {\n    return this.minRows;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) {\n    this.minRows = value;\n  }\n\n  /** Maximum number of rows for this textarea. */\n   maxRows: number;\n/**\n * @return {?}\n */\nget mdAutosizeMaxRows(): number {\n    return this.maxRows;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) {\n    this.maxRows = value;\n  }\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * The minimum height of the textarea as determined by minRows.\n * @return {?}\n */\nget _minHeight() {\n    return this.minRows ? `${this.minRows * this._cachedLineHeight}px` : null;\n  }\n/**\n * The maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\nget _maxHeight() {\n    return this.maxRows ? `${this.maxRows * this._cachedLineHeight}px` : null;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.offsetHeight;\n    textarea.parentNode.removeChild(textareaClone);\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    '[style.min-height]': '_minHeight',\n    '[style.max-height]': '_maxHeight',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Minimum number of rows for this textarea.\n * @type {?}\n */\nMdTextareaAutosize.prototype.minRows;\n/**\n * Maximum number of rows for this textarea.\n * @type {?}\n */\nMdTextareaAutosize.prototype.maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}