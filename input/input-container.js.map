{"version":3,"sources":["../../../../src/lib/input/input-container.ts"],"names":[],"mappings":"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","file":"input-container.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  MdInputContainerDuplicatedHintError,\n  MdInputContainerMissingMdInputError,\n  MdInputContainerPlaceholderConflictError,\n  MdInputContainerUnsupportedTypeError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * The hint directive, used to tag content as hint labels (going under the input).\n */\nexport class MdHint {\n  // Whether to align the hint label at the start or end of the line.\n   align: 'start' | 'end' = 'start';\n\n  // Unique ID for the hint. Used for the aria-describedby on the input.\n   id: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/** @type {?} */\nMdHint.prototype.align;\n/** @type {?} */\nMdHint.prototype.id;\n}\n\n/**\n * Directive, used to display a single error message under the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    '[class.mat-input-error]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * The input prefix.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * The input suffix.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * The input directive, used to mark the input that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n\n  /** Whether the element is focused or not. */\n  focused = false;\n\n  /** Sets the aria-describedby attribute on the input for improved a11y. */\n  ariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; };\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n\n  /**\n   * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n   */\n   _placeholderChange = new EventEmitter<string>();\n/**\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _ngControl\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\npublic _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw new MdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    return ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n}\n\n/**\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\n * improve on its behaviour, along with styling it according to the Material Design.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit {\n  /** Alignment of the input container's content. */\n   align: 'start' | 'end' = 'start';\n\n  /** Color of the input divider, based on the theme. */\n   color: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; };\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n\n  /** State of the md-hint and md-error animations. */\n  _subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType = 'auto';\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (!this._mdInputChild) {\n      throw new MdInputContainerMissingMdInputError();\n    }\n\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Whether the input container is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._mdInputChild._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw new MdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw new MdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw new MdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    let /** @type {?} */ ids: string[] = [];\n    let /** @type {?} */ startHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'start') : null;\n    let /** @type {?} */ endHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'end') : null;\n\n    if (startHint) {\n      ids.push(startHint.id);\n    } else if (this._hintLabel) {\n      ids.push(this._hintLabelId);\n    }\n\n    if (endHint) {\n      ids.push(endHint.id);\n    }\n\n    this._mdInputChild.ariaDescribedby = ids.join(' ');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.mat-input-container]': 'true',\n    '[class.mat-input-invalid]': '_isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdInputContainer.prototype._parentForm;\n/** @type {?} */\nMdInputContainer.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}