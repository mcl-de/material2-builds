{"version":3,"sources":["../../../../src/lib/list/list.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,eAAe,EACf,YAAY,EAEZ,SAAS,EACT,UAAU,EACV,MAAM,EACN,KAAK,EACL,WAAW,EACX,QAAQ,EACR,QAAQ,GAET,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAA,MAAE,EAAO,YAAA,EAAa,MAAA,SAAA,CAAA;AAC7B,MAEC;;AAAkC,wBAAA,GAAoC;IADvE,EAEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBADvB,QAAQ,EAEE,yBAAA;aADX,EAEC,EAAG;CADJ,CAEC;AADF;;GAEG;AACF,4BAAA,GAAA,MAAA,EACA,CAAC;AAGF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aANM,CAAA,cAAgB,CAAA;AAOtB,CAAC;AAED;;;GAGG;AACH,MAVC,CAAA,MAAA,eAAA,GAAA,IAAA,WAAA,CAAA,WAAA,CAAA,CAAA;AAYD,MAAM,gBAAgB,CAhBhB,gBAAA,GAAmB,kBAAA,CAAmB;AAiB5C,MAAM,gBAAgB,CAhBhB,aAAA,GAAgB,eAAA,CAAgB;AAiBtC,MARC;;AAA2B,iBAAA,GAAoC;IAShE,EARE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBASvB,QAAQ,EARE,MAAA,CAAO,EAAC;gBASlB,QAAQ,EARE,8CAAA;gBASV,IAAI,EARE;oBASJ,MAAM,EARE,MAAA;iBAAO;gBASjB,QAAQ,EARE,2BAAA;gBASV,SAAS,EARE,CAAA,UAAE,CAAU;gBASvB,SAAS,EARE,CAAA,EAAG,OAAA,EAAS,eAAA,EAAiB,QAAA,EAAU,gBAAA,EAAiB,CAAE;gBASrE,aAAa,EARE,iBAAA,CAAkB,IAAC;aASnC,EARC,EAAG;CASJ,CARC;AASF;;GAEG;AATF,qBAAA,GAAA,MAAA,EAWA,CAAC;AAGF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;AACtB,CAAC;AAED;;;GAGG;AACH,MAnBC;;AAAuC,6BAAA,GAAoC;IAoB5E,EAnBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAoBvB,QAAQ,EAnBE,mBAAA;gBAoBV,IAAI,EAnBE;oBAoBJ,kBAAkB,EAnBE,MAAA;iBAoBrB;aACF,EAnBC,EAAG;CAoBJ,CAnBC;AAoBF;;GAEG;AApBF,iCAAA,GAAA,MAAA,EAsBA,CAAC;AAGF;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;AAClC,CAAC;AAED;;;GAGG;AACH,MA9BC;;AAA0C,gCAAA,GAAoC;IA+B/E,EA9BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA+BvB,QAAQ,EA9BE,2BAAA;gBA+BV,IAAI,EA9BE;oBA+BJ,sBAAsB,EA9BE,MAAA;iBA+BzB;aACF,EA9BC,EAAG;CA+BJ,CA9BC;AA+BF;;GAEG;AA/BF,oCAAA,GAAA,MAAA,EAiCA,CAAC;AAGF;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;AACrC,CAAC;AAED;;GAEG;AACH,MAzCC;;AAAyC,+BAAA,GAAoC;IA0C9E,EAzCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA0CvB,QAAQ,EAzCE,2BAAA;gBA0CV,SAAS,EAzCE,CAAA,EAAG,OAAA,EAAS,eAAA,EAAiB,QAAA,EAAU,aAAA,EAAc,CAAE;aA0CnE,EAzCC,EAAG;CA0CJ,CAzCC;AA0CF;;GAEG;AA1CF,mCAAA,GAAA,MAAA,EA4CA,CAAC;AAGF;IACA,gBAAgB;IAChB,oBAAoB,CAAC,UAAU,CAAC;IAChC;;;OAGG;IACH,oBAAoB,CAAC,cAAc,CAAC;AACpC,CAAC;AAED;;;GAGG;AACH,MApDC;;AAA0C,gCAAA,GAAoC;IAqD/E,EApDE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAqDvB,QAAQ,EApDE,yBAAA;gBAqDV,IAAI,EApDE;oBAqDJ,qBAAqB,EApDE,MAAA;iBAqDxB;aACF,EApDC,EAAG;CAqDJ,CApDC;AAqDF;;GAEG;AArDF,oCAAA,GAAA,MAAA,EAuDA,CAAC;AAGF;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;AACrC,CAAC;AAED;;;GAGG;AACH,MA/DC;;AAA6C,mCAAA,GAAoC;IAgElF,EA/DE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAgEvB,QAAQ,EA/DE,qCAAA;gBAgEV,IAAI,EA/DE;oBAgEJ,yBAAyB,EA/DE,MAAA;iBAgE5B;aACF,EA/DC,EAAG;CAgEJ,CA/DC;AAgEF;;GAEG;AAhEF,uCAAA,GAAA,MAAA,EAkEA,CAAC;AAGF;IACA,gBAAgB;IAChB,wBAAwB,CAAC,UAAU,CAAC;IACpC;;;OAGG;IACH,wBAAwB,CAAC,cAAc,CAAC;AACxC,CAAC;AAED;;;GAGG;AACH,MA1EC;;AAA2C,iCAAA,GAAoC;IA2EhF,EA1EE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA2EvB,QAAQ,EA1EE,iCAAA;gBA2EV,IAAI,EA1EE;oBA2EJ,uBAAuB,EA1EE,MAAA;iBA2E1B;aACF,EA1EC,EAAG;CA2EJ,CA1EC;AA2EF;;GAEG;AA3EF,qCAAA,GAAA,MAAA,EA6EA,CAAC;AAGF;IACA,gBAAgB;IAChB,sBAAsB,CAAC,UAAU,CAAC;IAClC;;;OAGG;IACH,sBAAsB,CAAC,cAAc,CAAC;AACtC,CAAC;AAED;;;GAGG;AACH,MArFC;;AAAgD,sCAAA,GAAoC;IAsFrF,EArFE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAsFvB,QAAQ,EArFE,iCAAA;gBAsFV,IAAI,EArFE;oBAsFJ,uBAAuB,EArFE,MAAA;iBAsF1B;aACF,EArFC,EAAG;CAsFJ,CArFC;AAsFF;;GAEG;AAtFF,0CAAA,GAAA,MAAA,EAwFA,CAAC;AAGF;IACA,gBAAgB;IAChB,2BAA2B,CAAC,UAAU,CAAC;IACvC;;;OAGG;IACH,2BAA2B,CAAC,cAAc,CAAC;AAC3C,CAAC;AAED,MAhGC;IAkHD;;;;OAIG;IACH,YArGsB,SAAW,EAAkB,QAAU,EAC7C,SAAW;QADL,cAAA,GAAA,SAAA,CAAW;QAAkB,aAAA,GAAA,QAAA,CAAU;QAC7C,cAAA,GAAA,SAAA,CAAW;QA8E3B;;;WAGG;QACH,kBAhGI,GAAA,KAAA,CAAA;QAiGF,cAAS,GAhGY,KAAA,CAAM;IAaK,CAAA;IAuFlC;;;OAGG;IACH,IAjGG,UAAA,CAAA,MAAA;QAkGC,IAAI,CAjGC,SAAC,CAAS,eAAC,CAkGZ,IAAI,CAjGC,QAAC,CAAQ,aAAC,EAAc,sBAAA,EAAwB,MAAA,IAAU,IAAA,CAAK,CAAC;IAkG3E,CAAC;IASH;;OAEG;IACH,kBAxGG;QAyGC,IAAI,CAxGC,WAAC,GAAa,IAAI,YAAA,CAAa,IAAC,CAAI,MAAC,EAAO,IAAA,CAAK,SAAC,EAAU,IAAA,CAAK,QAAC,CAAQ,CAAC;IAyGlF,CAAC;IACH;;;OAGG;IACH,eA1GG;QA2GC,MAAM,CA1GC,CAAA,IAAE,CAAI,aAAC,IAAgB,CAAA,IAAE,CAAI,SAAC,KAAa,aAAA,CAAc,CAAC;IA2GnE,CAAC;IACH;;OAEG;IACH,YA5GG;QA6GC,IAAI,CA5GC,SAAC,GAAW,IAAA,CAAK;IA6GxB,CAAC;IACH;;OAEG;IACH,WA9GG;QA+GC,IAAI,CA9GC,SAAC,GAAW,KAAA,CAAM;IA+GzB,CAAC;;AA7GI,qBAAA,GAAoC;IA+G3C,EA9GE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA+GvB,QAAQ,EA9GE,MAAA,CAAO,EAAC;gBA+GlB,QAAQ,EA9GE,gEAAA;gBA+GV,IAAI,EA9GE;oBA+GJ,MAAM,EA9GE,UAAA;oBA+GR,SAAS,EA9GE,gBAAA;oBA+GX,QAAQ,EA9GE,eAAA;oBA+GV,uBAAuB,EA9GE,MAAA;iBA+G1B;gBACD,WAAW,EA9GE,gBAAA;gBA+Gb,aAAa,EA9GE,iBAAA,CAAkB,IAAC;aA+GnC,EA9GC,EAAG;CA+GJ,CA9GC;AA+GF;;GAEG;AA/GF,yBAAA,GAAA,MAAA;IAiHD,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;CACjG,CAAC;AA/GK,yBAAA,GAAyD;IAiHhE,eAAe,EAhHE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAiHlC,QAAQ,EAhHE,CAAA,EAAG,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,CAAA,MAAE,EAAM,EAAG,EAAE;IAiHvD,YAAY,EAhHE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,wBAAE,EAAwB,EAAG,EAAE;CAiHzE,CAhHC;AAmHF;IACA,gBAAgB;IAChB,UAAU,CAAC,UAAU,CAAC;IACtB;;;OAGG;IACH,UAAU,CAAC,cAAc,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,cAAc,CAAC;IAC1B;;;;OAIG;IACH,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC;IACnC,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;IAC/B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;IAC5B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;IAC/B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC9B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;AAC/B,CAAC","file":"list.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  ContentChildren,\n  ContentChild,\n  QueryList,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OpaqueToken,\n  Optional,\n  Renderer,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n/**\n * Token used to inject the list type into child MdListItem components so they can know whether\n * they're in a nav list (and thus should use an MdRipple).\n */\nexport const LIST_TYPE_TOKEN = new OpaqueToken('list_type');\n\nconst /** @type {?} */ NORMAL_LIST_TYPE = 'normal_list_type';\nconst /** @type {?} */ NAV_LIST_TYPE = 'nav_list_type';\nexport class MdList {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {\n    'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NORMAL_LIST_TYPE }],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {\n    '[class.mat-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {\n    '[class.mat-nav-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive to set the ListType token to NAV_LIST_TYPE.\n */\nexport class MdNavListTokenSetter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NAV_LIST_TYPE }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListTokenSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListTokenSetter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListTokenSetter.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    '[class.mat-divider]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar]',\n  host: {\n    '[class.mat-list-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon]',\n  host: {\n    '[class.mat-list-icon]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {\n    '[class.mat-subheader]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that\n * are children of an md-nav-list; md-list items never have ripples.\n */\ndisableRipple: boolean = false;\n  _hasFocus: boolean = false;\nprivate _lineSetter: MdLineSetter;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    this._renderer.setElementClass(\n        this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _listType\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _listType: string) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && (this._listType === NAV_LIST_TYPE);\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._hasFocus = false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '[class.mat-list-item]': 'true',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIST_TYPE_TOKEN, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that\n * are children of an md-nav-list; md-list items never have ripples.\n * @type {?}\n */\nMdListItem.prototype.disableRipple;\n/** @type {?} */\nMdListItem.prototype._hasFocus;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._listType;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}