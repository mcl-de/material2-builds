{"version":3,"sources":["../../../../src/lib/chips/chip-list.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,uBAAuB,EACvB,SAAS,EACT,eAAe,EACf,UAAU,EACV,KAAK,EAEL,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAA,MAAE,EAAM,MAAA,QAAA,CAAA;AACf,OAAO,EAAA,eAAE,EAAe,MAAA,gCAAA,CAAA;AACxB,OAAO,EAAA,qBAAE,EAAqB,MAAA,mCAAA,CAAA;AAC9B,OAAO,EAAA,KAAE,EAAM,UAAA,EAAY,WAAA,EAAY,MAAA,2BAAA,CAAA;AACvC;;;;;;;;;GASG;AACH,MAEC;IASD;;OAEG;IACH,YAEsB,WAAa;QAAb,gBAAA,GAAA,WAAA,CAAa;QAXzB,gBAAA,GAAwC,IAAI,OAAA,EAAQ,CAAE;QAF9D,6CAA6C;QAKnC,gBAAA,GAAuB,IAAA,CAAK;IAQM,CAAA;IAD9C;;OAEG;IACH,kBAAG;QACC,IAAI,CAAC,WAAC,GAAa,IAAI,eAAA,CAAgB,IAAC,CAAI,KAAC,CAAK,CAAC,QAAC,EAAQ,CAAE;QAE9D,kDAAkD;QAClD,IAAI,CAAC,eAAC,CAAe,IAAC,CAAI,KAAC,CAAK,CAAC;QAEjC,sCAAsC;QACtC,IAAI,CAAC,KAAC,CAAK,OAAC,CAAO,SAAC,CAAS,CAAC,KAAwB;YACpD,IAAI,CAAC,eAAC,CAAe,KAAC,CAAK,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IACH;;;;OAIG;IACH,IAAI,UAAA;QACA,MAAM,CAAC,IAAA,CAAK,WAAC,CAAW;IAC1B,CAAC;IACH;;;OAGG;IACH,IAHG,UAAA,CAAA,KAAA;QAIC,IAAI,CAHC,WAAC,GAAa,qBAAA,CAAsB,KAAC,CAAK,CAAC;IAIlD,CAAC;IACH;;;;OAIG;IACH,KAHG;QAIC,+DAA+D;QAC/D,IAAI,CAHC,WAAC,CAAW,kBAAC,EAAkB,CAAE;IAIxC,CAAC;IACH;;;;OAIG;IACH,QANG,CAAA,KAAA;QAOC,IAAI,gBAAgB,CANhB,MAAA,GAAO,CAAE,KAAA,CAAM,MAAU,CAAA,CAAY;QAQzC,uFAAuF;QACvF,EAAE,CAAC,CAAC,MANC,IAAS,MAAA,CAAO,SAAC,CAAS,QAAC,CAAQ,UAAC,CAAU,CAAC,CAAC,CAAA;YAOnD,MAAM,CAAC,CAAC,KANC,CAAK,OAAC,CAAO,CAAC,CAAA;gBAOrB,KANK,KAAA;oBAOH,gDAAgD;oBAChD,EAAE,CAAC,CAAC,IANC,CAAI,UAAC,CAAU,CAAC,CAAA;wBAOnB,IAAI,CANC,0BAAC,EAA0B,CAAE;oBAOpC,CAAC;oBAED,wEAAwE;oBACxE,KAAK,CANC,cAAC,EAAc,CAAE;oBAOvB,KAAK,CAAC;gBACR,KANK,UAAA;oBAOH,IAAI,CANC,WAAC,CAAW,qBAAC,EAAqB,CAAE;oBAOzC,KAAK,CANC,cAAC,EAAc,CAAE;oBAOvB,KAAK,CAAC;gBACR,KANK,WAAA;oBAOH,IAAI,CANC,WAAC,CAAW,iBAAC,EAAiB,CAAE;oBAOrC,KAAK,CANC,cAAC,EAAc,CAAE;oBAOvB,KAAK,CAAC;gBACR;oBACE,IAAI,CANC,WAAC,CAAW,SAAC,CAAS,KAAC,CAAK,CAAC;YAOtC,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IAPA,0BAAA;QASC,oCAAoC;QACpC,EAAE,CAAC,CAAC,CARC,IAAC,CAAI,UAAC,CAAU,CAAC,CAAA;YASpB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,gBAAgB,CARhB,YAAA,GAAe,IAAA,CAAK,WAAC,CAAW,eAAC,CAAe;QAUpD,EAAE,CAAC,CAAC,IARC,CAAI,aAAC,CAAa,YAAC,CAAY,CAAC,CAAC,CAAA;YASpC,IAAI,gBAAgB,CARhB,WAAA,GAAsB,IAAA,CAAK,KAAC,CAAK,OAAC,EAAO,CAAE,YAAC,CAAY,CAAC;YAU7D,EAAE,CAAC,CAAC,WARC,CAAW,CAAC,CAAA;gBASf,WAAW,CARC,cAAC,EAAc,CAAE;YAS/B,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IAPA,eAAA,CAAA,KAAA;QASC,KAAK,CARC,OAAC,CAAO,IAAC,IAAO,IAAA,CAAK,QAAC,CAAQ,IAAC,CAAI,CAAC,CAAC;IAS7C,CAAC;IACH;;;;;;;;OAQG;IAPA,QAAA,CAAA,IAAA;QASC,2DAA2D;QAC3D,EAAE,CAAC,CAAC,IARC,CAAI,WAAC,CAAW,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC,CAAA;YAS9B,MAAM,CAAC;QACT,CAAC;QAED,4DAA4D;QAC5D,IAAI,CARC,OAAC,CAAO,SAAC,CAAS;YASrB,IAAI,gBAAgB,CARhB,SAAA,GAAoB,IAAA,CAAK,KAAC,CAAK,OAAC,EAAO,CAAE,OAAC,CAAO,IAAC,CAAI,CAAC;YAU3D,EAAE,CAAC,CAAC,IARC,CAAI,aAAC,CAAa,SAAC,CAAS,CAAC,CAAC,CAAA;gBASjC,IAAI,CARC,WAAC,CAAW,qBAAC,CAAqB,SAAC,CAAS,CAAC;YASpD,CAAC;QACH,CAAC,CARC,CAAC;QAUH,6DAA6D;QAC7D,IAAI,CARC,OAAC,CAAO,SAAC,CAAS;YASrB,IAAI,gBAAgB,CARhB,SAAA,GAAoB,IAAA,CAAK,KAAC,CAAK,OAAC,EAAO,CAAE,OAAC,CAAO,IAAC,CAAI,CAAC;YAU3D,EAAE,CAAC,CAAC,IARC,CAAI,aAAC,CAAa,SAAC,CAAS,CAAC,CAAC,CAAA;gBASjC,0CAA0C;gBAC1C,EAAE,CAAC,CAAC,SARC,GAAW,IAAA,CAAK,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;oBASrC,IAAI,CARC,WAAC,CAAW,aAAC,CAAa,SAAC,CAAS,CAAC;gBAS5C,CAAC;gBARC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,GAAW,CAAA,IAAK,CAAA,CAAE,CAAC,CAAA;oBAS7B,IAAI,CARC,WAAC,CAAW,aAAC,CAAa,SAAC,GAAW,CAAA,CAAE,CAAC;gBAShD,CAAC;YACH,CAAC;YAED,IAAI,CARC,WAAC,CAAW,MAAC,CAAM,IAAC,CAAI,CAAC;YAS9B,IAAI,CARC,OAAC,CAAO,WAAC,EAAW,CAAE;QAS7B,CAAC,CARC,CAAC;QAUH,IAAI,CARC,WAAC,CAAW,GAAC,CAAG,IAAC,EAAK,IAAA,CAAK,CAAC;IASnC,CAAC;IACH;;;;;OAKG;IANA,aAAA,CAAA,KAAA;QAQC,MAAM,CAPC,KAAA,IAAS,CAAA,IAAK,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK,MAAC,CAAM;IAQjD,CAAC;;AALI,qBAAA,GAAoC;IAQ3C,EAPE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAQvB,QAAQ,EAPE,MAAA,CAAO,EAAC;gBAQlB,QAAQ,EAPE,6BAAA;gBAQV,QAAQ,EAPE,oEAAA;gBAQV,IAAI,EAPE;oBAQJ,aAAa;oBACb,UAAU,EAPE,GAAA;oBAQZ,MAAM,EAPE,SAAA;oBAQR,uBAAuB,EAPE,MAAA;oBASzB,SAAS;oBACT,SAAS,EAPE,SAAA;oBAQX,WAAW,EAPE,kBAAA;iBAQd;gBACD,OAAO,EAPE;oBAQP,KAAK,EAPE,IAAI,eAAA,CAAgB,MAAC,CAAM;iBAQnC;gBACD,SAAS,EAPE,CAAA,WAAE,CAAW;gBAQxB,aAAa,EAPE,iBAAA,CAAkB,IAAC;gBAQlC,eAAe,EAPE,uBAAA,CAAwB,MAAC;aAQ3C,EAPC,EAAG;CAQJ,CAPC;AAQF;;GAEG;AARF,yBAAA,GAAA,MAAA;IAUD,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AARK,yBAAA,GAAyD;IAUhE,YAAY,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAU9B,CATC;AAYF;IACA,gBAAgB;IAChB,UAAU,CAAC,UAAU,CAAC;IACtB;;;OAGG;IACH,UAAU,CAAC,cAAc,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,cAAc,CAAC;IAC1B;;;OAGG;IACH,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC;;;OAGG;IACH,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC;;;OAGG;IACH,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC;;;OAGG;IACH,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;IAC3B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;AACjC,CAAC","file":"chip-list.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit {\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager;\n\n  /** The chip components contained within this chip list. */\n  chips: QueryList<MdChip>;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    'tabindex': '0',\n    'role': 'listbox',\n    '[class.mat-chip-list]': 'true',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}