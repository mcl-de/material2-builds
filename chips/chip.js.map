{"version":3,"sources":["../../../../src/lib/chips/chip.ts"],"names":[],"mappings":"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","file":"chip.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip implements Focusable, OnInit, OnDestroy {\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n */\nprotected _disabled: boolean = null;\n/**\n * Whether or not the chip is selected.\n */\nprotected _selected: boolean = false;\n/**\n * The palette color of selected chips.\n */\nprotected _color: string = 'primary';\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._addDefaultCSSClass();\n    this._updateColor(this._color);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Whether or not the chip is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * Sets the disabled state of the chip.\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n/**\n * A String representation of the current disabled state.\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n/**\n * Whether or not this chip is selected.\n * @return {?}\n */\nget selected(): boolean {\n    return this._selected;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n\n    if (this._selected) {\n      this.select.emit({chip: this});\n    } else {\n      this.deselect.emit({chip: this});\n    }\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * The color of the chip. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\n/**\n * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n * @return {?}\n */\nprivate _addDefaultCSSClass() {\n    let /** @type {?} */ el: HTMLElement = this._elementRef.nativeElement;\n\n    // Always add the `mat-chip` class\n    el.classList.add('mat-chip');\n\n    // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n    if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n        el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n      el.classList.add('mat-basic-chip');\n    }\n  }\n/**\n * Updates the private _color variable and the native element.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the mat-color on the native element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class.mat-chip]': 'true',\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n * @type {?}\n */\nMdChip.prototype._disabled;\n/**\n * Whether or not the chip is selected.\n * @type {?}\n */\nMdChip.prototype._selected;\n/**\n * The palette color of selected chips.\n * @type {?}\n */\nMdChip.prototype._color;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/** @type {?} */\nMdChip.prototype._renderer;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}