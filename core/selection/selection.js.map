{"version":3,"sources":["../../../../../src/lib/core/selection/selection.ts"],"names":[],"mappings":"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","file":"selection.js","sourceRoot":"","sourcesContent":["import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\nprivate _selection: Set<T> = new Set();\nprivate _deselectedToEmit: T[] = [];\nprivate _selectedToEmit: T[] = [];\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  onChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n"]}