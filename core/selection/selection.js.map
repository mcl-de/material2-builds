{"version":3,"sources":["../../../../../src/lib/core/selection/selection.ts"],"names":[],"mappings":"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","file":"selection.js","sourceRoot":"","sourcesContent":["import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n"]}