{"version":3,"sources":["../../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,QAAQ,GACT,MAAM,eAAA,CAAgB;AAGvB;;;;;;;;;;GAUG;AACH,MAEC;IAuBD;;;OAGG;IACH,YALsB,WAAa,EAAoB,SAAW;QAA5C,gBAAA,GAAA,WAAA,CAAa;QAAoB,cAAA,GAAA,SAAA,CAAW;QAvBhE,qCAAqC;QACpC,UAAK,GAE0B,WAAA,CAAY;QAA5C,wCAAwC;QACvC,aAAQ,GAEY,KAAA,CAAM;QAwBzB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IA1BH;;;OAGG;IACH,IACG,KAAA,KAAqB,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;IAAA,CAAE;IAA9C;;;OAGG;IACH,IAHG,KAAA,CAAA,KAAA;QAIC,EAAE,CAAC,CAAC,KAHC,CAAK,CAAC,CAAA;YAIT,IAAI,gBAAgB,CAHhB,aAAA,GAAgB,IAAA,CAAK,WAAC,CAAW,aAAC,CAAa;YAKnD,IAAI,CAHC,SAAC,CAAS,eAAC,CAAe,aAAC,EAAc,OAAA,IAAQ,CAAI,KAAC,EAAK,EAAG,KAAA,CAAM,CAAC;YAI1E,IAAI,CAHC,SAAC,CAAS,eAAC,CAAe,aAAC,EAAc,OAAA,KAAQ,EAAK,EAAG,IAAA,CAAK,CAAC;YAIpE,IAAI,CAHC,MAAC,GAAQ,KAAA,CAAM;QAItB,CAAC;IACH,CAAC;;AAII,2BAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAOvB,QAAQ,EANE,MAAA,CAAO,EAAC;gBAOlB,aAAa,EANE,iBAAA,CAAkB,IAAC;gBAOlC,QAAQ,EANE,yCAAA;gBAOV,SAAS,EANE,CAAA,qBAAE,CAAqB;gBAOlC,QAAQ,EANE,EAAA;gBAOV,IAAI,EANE;oBAOJ,6BAA6B,EANE,MAAA;oBAO/B,2CAA2C,EANE,2BAAA;oBAO7C,qCAAqC,EANE,qBAAA;oBAOvC,sCAAsC,EANE,UAAA;iBAOzC;aACF,EANC,EAAG;CAOJ,CANC;AAOF;;GAEG;AAPF,+BAAA,GAAA,MAAA;IASD,EAAC,IAbC,EAAA,UAAA,GAAA;IAcF,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CAAC;AAPK,+BAAA,GAAyD;IAShE,OAAO,EARE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAS1B,UAAU,EARE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAS7B,OAAO,EARE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CASzB,CARC;AAWF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,cAAc,CAAC;IAChC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;IACjC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACpC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAClC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;IACvC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC;AACrC,CAAC","file":"pseudo-checkbox.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n  /** Display state of the checkbox. */\n   state: MdPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n   disabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; };\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.setElementClass(nativeElement, `mat-${this.color}`, false);\n      this._renderer.setElementClass(nativeElement, `mat-${value}`, true);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}