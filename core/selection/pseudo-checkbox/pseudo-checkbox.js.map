{"version":3,"sources":["../../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,QAAQ,GACT,MAAM,eAAA,CAAgB;AAGvB;;;;;;;;;;GAUG;AACH,MAEC;IA0BD;;;OAGG;IACH,YARsB,WAAa,EAAoB,SAAW;QAA5C,gBAAA,GAAA,WAAA,CAAa;QAAoB,cAAA,GAAA,SAAA,CAAW;QAvBlE;;WAEG;QACH,UAAI,GAAA,WAAA,CAAA;QACJ;;WAEG;QACH,aADI,GAAA,KAAA,CAAA;QA2BA,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IA1BH;;;OAGG;IACH,IAFG,KAAA,KAAqB,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;IAG5C;;;OAGG;IACH,IANG,KAAA,CAAA,KAAA;QAOC,EAAE,CAAC,CAAC,KANC,CAAK,CAAC,CAAA;YAOT,IAAI,gBAAgB,CANhB,aAAA,GAAgB,IAAA,CAAK,WAAC,CAAW,aAAC,CAAa;YAQnD,IAAI,CANC,SAAC,CAAS,eAAC,CAAe,aAAC,EAAc,OAAA,IAAQ,CAAI,KAAC,EAAK,EAAG,KAAA,CAAM,CAAC;YAO1E,IAAI,CANC,SAAC,CAAS,eAAC,CAAe,aAAC,EAAc,OAAA,KAAQ,EAAK,EAAG,IAAA,CAAK,CAAC;YAOpE,IAAI,CANC,MAAC,GAAQ,KAAA,CAAM;QAOtB,CAAC;IACH,CAAC;;AACI,2BAAA,GAAoC;IAU3C,EATE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAUvB,QAAQ,EATE,MAAA,CAAO,EAAC;gBAUlB,aAAa,EATE,iBAAA,CAAkB,IAAC;gBAUlC,QAAQ,EATE,yCAAA;gBAUV,SAAS,EATE,CAAA,qBAAE,CAAqB;gBAUlC,QAAQ,EATE,EAAA;gBAUV,IAAI,EATE;oBAUJ,6BAA6B,EATE,MAAA;oBAU/B,2CAA2C,EATE,2BAAA;oBAU7C,qCAAqC,EATE,qBAAA;oBAUvC,sCAAsC,EATE,UAAA;iBAUzC;aACF,EATC,EAAG;CAUJ,CATC;AAUF;;GAEG;AAVF,+BAAA,GAAA,MAAA;IAYD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CAAC;AAVK,+BAAA,GAAyD;IAYhE,OAAO,EAXE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAY1B,UAAU,EAXE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAY7B,OAAO,EAXE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAYzB,CAXC;AAcF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,cAAc,CAAC;IAChC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;IACjC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACpC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAClC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;IACvC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC;AACrC,CAAC","file":"pseudo-checkbox.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.setElementClass(nativeElement, `mat-${this.color}`, false);\n      this._renderer.setElementClass(nativeElement, `mat-${value}`, true);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}