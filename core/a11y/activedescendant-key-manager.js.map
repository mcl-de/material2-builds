{"version":3,"sources":["../../../../../src/lib/core/a11y/activedescendant-key-manager.ts"],"names":[],"mappings":"AACA,OAAO,EAAA,cAAE,EAA0B,MAAA,oBAAA,CAAA;AAWnC,MACC,iCAAA,SAAA,cAAA;IAAD;;OAEG;IACH,YADG,KAA0C;QAEzC,KAAK,CAAC,KAAK,CAAC,CAAC;IACf,CAAC;IACH;;;;;;OAMG;IACH,aAFG,CAAA,KAAA;QAGC,OAAO,CAFC,OAAC,EAAO,CAAE,IAAC,CAAI;YAGrB,EAAE,CAAC,CAAC,IAFC,CAAI,UAAC,CAAU,CAAC,CAAA;gBAGnB,IAAI,CAFC,UAAC,CAAU,iBAAC,EAAiB,CAAE;YAGtC,CAAC;YACD,KAAK,CAFC,aAAC,CAAa,KAAC,CAAK,CAAC;YAG3B,EAAE,CAAC,CAAC,IAFC,CAAI,UAAC,CAAU,CAAC,CAAA;gBAGnB,IAAI,CAFC,UAAC,CAAU,eAAC,EAAe,CAAE;YAGpC,CAAC;QACH,CAAC,CAFC,CAAC;IAGL,CAAC;CAEF","file":"activedescendant-key-manager.js","sourceRoot":"","sourcesContent":["import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Highlightable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n"]}