{"version":3,"sources":["../../../../../src/lib/core/option/option.ts"],"names":[],"mappings":"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","file":"option.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ModuleWithProviders,\n  Renderer,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  multiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n   value: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Event emitted when the option is selected or deselected. */\n   onSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  };\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._renderer;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdOptionModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}