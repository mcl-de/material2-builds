{"version":3,"sources":["../../../../../src/lib/core/option/option.ts"],"names":[],"mappings":"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","file":"option.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ModuleWithProviders,\n  Renderer,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._renderer;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdOptionModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}