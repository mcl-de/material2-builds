{"version":3,"sources":["../../../../../src/lib/core/portal/portal.ts"],"names":[],"mappings":"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","file":"portal.js","sourceRoot":"","sourcesContent":["import {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    NullPortalHostError,\n    PortalAlreadyAttachedError,\n    NoPortalAttachedError,\n    NullPortalError,\n    PortalHostAlreadyDisposedError,\n    UnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throw new NullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throw new NoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<any>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /**\n   * Additional locals for the instantiated embedded view.\n   * These locals can be seen as \"exports\" for the template, such as how ngFor has\n   * index / event / odd.\n   * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n   */\n  locals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\nprivate _attachedPortal: Portal<any>;\nprivate _disposeFn: () => void;\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throw new NullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throw new PortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throw new UnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n"]}