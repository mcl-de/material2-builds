{"version":3,"sources":["../../../../../src/lib/core/portal/portal-directives.ts"],"names":[],"mappings":"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","file":"portal-directives.js","sourceRoot":"","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PortalModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}