{"version":3,"sources":["../../../../../src/lib/core/portal/dom-portal-host.ts"],"names":[],"mappings":"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","file":"dom-portal-host.js","sourceRoot":"","sourcesContent":["import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n"]}