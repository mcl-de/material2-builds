{"version":3,"sources":["../../../../../src/lib/core/compatibility/compatibility.ts"],"names":[],"mappings":"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","file":"compatibility.js","sourceRoot":"","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  OpaqueToken,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {MdError} from '../errors/error';\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nlet hasDoneGlobalChecks = false;\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\n/**\n * Exception thrown if the consumer has used an invalid Material prefix on a component.\n * \\@docs-private\n */\nexport class MdCompatibilityInvalidPrefixError extends MdError {\n/**\n * @param {?} prefix\n * @param {?} nodeName\n */\nconstructor(prefix: string, nodeName: string) {\n    super(\n      `The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n      `It was used on an \"${nodeName.toLowerCase()}\" element.`\n    );\n  }\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CompatibilityModule,\n      providers: [],\n    };\n  }\n/**\n * @param {?} _document\n */\nconstructor(\nprivate _document: any) {\n    if (!hasDoneGlobalChecks && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n/** @type {?} */\nCompatibilityModule.prototype._document;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}