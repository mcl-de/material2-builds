{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay-ref.ts"],"names":[],"mappings":"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","file":"overlay-ref.js","sourceRoot":"","sourcesContent":["import {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) { }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    return this._portalHost.detach();\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel. *\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n"]}