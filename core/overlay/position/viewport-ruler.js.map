{"version":3,"sources":["../../../../../../src/lib/core/overlay/position/viewport-ruler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,UAAE,EAAW,QAAA,EAAU,QAAA,EAAS,MAAA,eAAA,CAAA;AACvC,OAAO,EAAA,gBAAE,EAAgB,MAAA,6BAAA,CAAA;AACzB;;;GAGG;AACH,MAGC;IADD;;OAEG;IACH,YAGG,gBAA6B;QAF5B,0CAA0C;QAC1C,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B,sFAAsF;QACtF,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;IACvE,CAAC;IACH;;;;OAIG;IACH,eAAG,CAAA,YAAA,GAAA,IAAA,CAAA,aAAA;QACC,oFAAoF;QACpF,mFAAmF;QACnF,2FAA2F;QAC3F,0FAA0F;QAC1F,8EAA8E;QAC9E,sEAAsE;QACtE,2FAA2F;QAC3F,oFAAoF;QACpF,2BAA2B;QAC3B,MAAM,gBAAgB,CAAhB,cAAA,GAAiB,IAAA,CAAK,yBAAC,CAAyB,YAAC,CAAY,CAAC;QACpE,MAAM,gBAAgB,CAAhB,MAAA,GAAS,MAAA,CAAO,WAAC,CAAW;QAClC,MAAM,gBAAgB,CAAhB,KAAA,GAAQ,MAAA,CAAO,UAAC,CAAU;QAEhC,MAAM,CAAC;YACL,GAAG,EAAE,cAAA,CAAe,GAAC;YACrB,IAAI,EAAE,cAAA,CAAe,IAAC;YACtB,MAAM,EAAE,cAAA,CAAe,GAAC,GAAK,MAAA;YAC7B,KAAK,EAAE,cAAA,CAAe,IAAC,GAAM,KAAA;YAC7B,MAAM;YACN,KAAK;SACN,CAAC;IACJ,CAAC;IACH;;;;OAIG;IACH,yBACG,CAAA,YAAA,GAAA,IAAA,CAAA,aAAA;QAAC,2FAA2F;QAC3F,0FAA0F;QAC1F,4FAA4F;QAC5F,oFAAoF;QACpF,wFAAwF;QACxF,sCAAsC;QACtC,MAAM,gBAAgB,CAChB,GAAA,GAAM,CAAA,YAAE,CAAY,GAAC,IAAM,QAAA,CAAS,IAAC,CAAI,SAAC,IAAY,MAAA,CAAO,OAAC,IAAU,CAAA,CAAE;QAAhF,MAAM,gBAAgB,CAChB,IAAA,GAAO,CAAA,YAAE,CAAY,IAAC,IAAO,QAAA,CAAS,IAAC,CAAI,UAAC,IAAa,MAAA,CAAO,OAAC,IAAU,CAAA,CAAE;QACnF,MAAM,CACC,EAAA,GAAE,EAAI,IAAA,EAAK,CAAC;IAArB,CAAC;IACH;;;OAGG;IACH,sBADG;QAEC,IAAI,CADC,aAAC,GAAe,QAAA,CAAS,eAAC,CAAe,qBAAC,EAAqB,CAAE;IAExE,CAAC;;AACI,wBAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,UAAA,EAAW;CAElB,CADC;AAEF;;GAEG;AAFF,4BAAA,GAAA,MAAA;IAID,EAAC,IAAI,EAAE,gBAAgB,GAAG;CACzB,CAAC;AAGF;IACA,gBAAgB;IAChB,aAPa,CAAA,UAAA,CAAA;IAQb;;;OAGG;IACH,aAPG,CAAA,cAAA,CAAA;IAQH;;;OAGG;IACH,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC;AACtC,CAAC;AAED;;;;GAIG;AACH,MAvBC,0CAAA,WAAA,EAwB+C,gBAAkC;IAChF,MAAM,CA9BC,WAAA,IAAe,IAAI,aAAA,CAAc,gBAAC,CAAgB,CAAC;AA+B5D,CAAC;AAED,MAAM,CA9BC,MAAA,gBAAA,CAAM,uBAAA,GAA0B;IA+BrC,yFAAyF;IACzF,OAAO,EA9BE,aAAA;IA+BT,IAAI,EA9BE,CAAA,CAAE,IAAI,QAAA,EAAS,EAAG,IAAI,QAAA,EAAS,EAAG,aAAA,CAAc,EAAE,gBAAA,CAAiB;IA+BzE,UAAU,EA9BE,+BAAA;CA+Bb,CA9BC","file":"viewport-ruler.js","sourceRoot":"","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Initially cache the document rectangle.\n    this._cacheViewportGeometry();\n\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}