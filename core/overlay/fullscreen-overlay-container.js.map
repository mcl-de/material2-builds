{"version":3,"sources":["../../../../../src/lib/core/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AACnB,OAAO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AACzB;;;;;;;;GAQG;AACH,MAEC,iCAAA,SAAA,gBAAA;IADD;;OAEG;IAAA,gBAAA;QAEC,KAAK,CADC,gBAAC,EAAgB,CAAE;QAEzB,IAAI,CADC,gCAAC,EAAgC,CAAE;QAExC,IAAI,CADC,4BAAC,CAA4B,MAAM,IAAA,CAAK,gCAAC,EAAgC,CAAE,CAAC;IAEnF,CAAC;IACH;;OAEG;IAFA,gCAAA;QAIC,EAAE,CAAC,CAAC,CAHC,IAAC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YAI3B,MAAM,CAAC;QACT,CAAC;QACD,IAAI,gBAAgB,CAHhB,iBAAA,GAAoB,IAAA,CAAK,oBAAC,EAAoB,CAAE;QAIpD,IAAI,gBAAgB,CAHhB,MAAA,GAAS,iBAAA,IAAqB,QAAA,CAAS,IAAC,CAAI;QAIhD,MAAM,CAHC,WAAC,CAAW,IAAC,CAAI,iBAAC,CAAiB,CAAC;IAI7C,CAAC;IACH;;;OAGG;IALA,4BAAA,CAAA,EAAA;QAOC,EAAE,CAAC,CAAC,QANC,CAAQ,iBAAC,CAAiB,CAAC,CAAA;YAO9B,QAAQ,CANC,gBAAC,CAAgB,kBAAC,EAAmB,EAAA,CAAG,CAAC;QAOpD,CAAC;QANC,IAAA,CAAK,EAAA,CAAA,CAAA,QAAK,CAAQ,uBAAC,CAAuB,CAAC,CAAA;YAO3C,QAAQ,CANC,gBAAC,CAAgB,wBAAC,EAAyB,EAAA,CAAG,CAAC;QAO1D,CAAC;QANC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,CAAA,QAAY,CAAA,CAAI,CAAC,oBAAC,CAAoB,CAAC,CAAA;YAOjD,QAAQ,CANC,gBAAC,CAAgB,qBAAC,EAAsB,EAAA,CAAG,CAAC;QAOvD,CAAC;QANC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,CAAA,QAAY,CAAA,CAAI,CAAC,mBAAC,CAAmB,CAAC,CAAA;YAOhD,QAAQ,CANC,gBAAC,CAAgB,oBAAC,EAAqB,EAAA,CAAG,CAAC;QAOtD,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,oBANG;QAOC,MAAM,CANC,QAAA,CAAS,iBAAC;YAOb,QAAQ,CANC,uBAAC;YAOV,CAAkB,CAAE,QANP,CAAA,CAAI,CAAC,oBAAC;YAOnB,CAAkB,CAAE,QANP,CAAA,CAAI,CAAC,mBAAC;YAOnB,IAAI,CANC;IAOX,CAAC;;AALI,qCAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,UAAA,EAAW;CAOlB,CANC;AAOF;;GAEG;AAPF,yCAAA,GAAA,MAAA,EASA,CAAC;AAGF;IACA,gBAAgB;IAChB,0BAA0B,CAAC,UAAU,CAAC;IACtC;;;OAGG;IACH,0BAA0B,CAAC,cAAc,CAAC;AAC1C,CAAC","file":"fullscreen-overlay-container.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}