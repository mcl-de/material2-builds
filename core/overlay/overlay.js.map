{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay.ts"],"names":[],"mappings":"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","file":"overlay.js","sourceRoot":"","sourcesContent":["import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll/scroll-dispatcher';\n\n\n/** Next overlay unique ID. */\nlet /** @type {?} */ nextUniqueId = 0;\n\n/** The default state for newly created overlays. */\nlet /** @type {?} */ defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {}\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  SCROLL_DISPATCHER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}