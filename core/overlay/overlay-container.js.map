{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay-container.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,UAAE,EAAW,QAAA,EAAU,QAAA,EAAS,MAAA,eAAA,CAAA;AACvC;;;GAGG;AACH,MAGC;IAAD;;;OAGG;IACH,IAIG,UAAA,KAA0B,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;IAHtD;;;OAGG;IACH,IAAG,UAAA,CAAA,KAAA;QACC,EAAE,CAAC,CAAC,IAAC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YAC1B,IAAI,CAAC,iBAAC,CAAiB,SAAC,CAAS,MAAC,CAAM,IAAC,CAAI,WAAC,CAAW,CAAC;YAE1D,EAAE,CAAC,CAAC,KAAC,CAAK,CAAC,CAAA;gBACT,IAAI,CAAC,iBAAC,CAAiB,SAAC,CAAS,GAAC,CAAG,KAAC,CAAK,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,IAAI,CAAC,WAAC,GAAa,KAAA,CAAM;IAC3B,CAAC;IACH;;;;;OAKG;IACH,mBACG;QAAC,EAAE,CAAC,CAAC,CACC,IAAC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YAAE,IAAA,CAAK,gBAAC,EAAgB,CAAE;QAAC,CAAA;QAAxD,MAAM,CACC,IAAA,CAAK,iBAAC,CAAiB;IAAhC,CAAC;IACH;;;;OAIG;IAEA,gBAAA;QAAC,IAAI,gBAAgB,CAChB,SAAA,GAAY,QAAA,CAAS,aAAC,CAAa,KAAC,CAAK,CAAC;QAA9C,SAAS,CACC,SAAC,CAAS,GAAC,CAAG,uBAAC,CAAuB,CAAC;QACjD,EAAE,CAAC,CAAC,IACC,CAAI,WAAC,CAAW,CAAC,CAAA;YAApB,SAAS,CACC,SAAC,CAAS,GAAC,CAAG,IAAC,CAAI,WAAC,CAAW,CAAC;QAA5C,CAAC;QAED,QAAQ,CACC,IAAC,CAAI,WAAC,CAAW,SAAC,CAAS,CAAC;QAArC,IAAI,CACC,iBAAC,GAAmB,SAAA,CAAU;IAArC,CAAC;;AAEI,2BAAA,GAAoC;IAA3C,EACE,IAAA,EAAM,UAAA,EAAW;CAAlB,CACC;AAAF;;GAEG;AAAF,+BAAA,GAAA,MAAA,EAEA,CANC;AASF;IACA,gBANG;IAOH,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBANc,CAAA,cAAA,CAAA;IAOd,gBANG;IAOH,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC7C,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;AACvC,CAAC;AAED;;;GAGG;AACH,MAnBC,6CAAA,eAAA;IAoBC,MAAM,CAzBC,eAAA,IAAmB,IAAI,gBAAA,EAAiB,CAAE;AA0BnD,CAAC;AAAA,CAzBC;AA2BF,MAAM,CAzBC,MAAA,gBAAA,CAAM,0BAAA,GAA6B;IA0BxC,6FAA6F;IAC7F,OAAO,EAzBE,gBAAA;IA0BT,IAAI,EAzBE,CAAA,CAAE,IAAI,QAAA,EAAS,EAAG,IAAI,QAAA,EAAS,EAAG,gBAAA,CAAiB,CAAC;IA0B1D,UAAU,EAzBE,kCAAA;CA0Bb,CAzBC","file":"overlay-container.js","sourceRoot":"","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n};\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}