{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay-directives.ts"],"names":[],"mappings":"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","file":"overlay-directives.js","sourceRoot":"","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _open = false;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * @return {?}\n */\nget open() {\n    return this._open;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset open(value: boolean) {\n    value ? this._attachOverlay() : this._detachOverlay();\n    this._open = value;\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'open': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._open;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: OverlayModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}