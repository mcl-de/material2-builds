{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/scroll-dispatcher.ts"],"names":[],"mappings":"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","file":"scroll-dispatcher.js","sourceRoot":"","sourcesContent":["import {Injectable, ElementRef, Optional, SkipSelf, NgZone} from '@angular/core';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher,\n                                                   ngZone: NgZone) {\n  return parentDispatcher || new ScrollDispatcher(ngZone);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}