{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/scroll-dispatcher.ts"],"names":[],"mappings":"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","file":"scroll-dispatcher.js","sourceRoot":"","sourcesContent":["import {Injectable, ElementRef, Optional, SkipSelf, NgZone} from '@angular/core';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const /** @type {?} */ DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  _scrolled: Subject<void> = new Subject<void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription = null;\nprivate _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher,\n                                                   ngZone: NgZone) {\n  return parentDispatcher || new ScrollDispatcher(ngZone);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}