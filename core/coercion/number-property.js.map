{"version":3,"sources":["../../../../../src/lib/core/coercion/number-property.ts"],"names":[],"mappings":"AACA;;;;;GAKG;AACH,MANC,+BAAA,KAAA,EAAA,aAAA,GAAA,CAAA;IAOC,iGAAiG;IACjG,4FAA4F;IAC5F,oFAAoF;IACpF,MAAM,CANC,KAAA,CAAM,UAAC,CAAU,gBAAA,CAAA,CAAA,KAAS,CAAA,CAAI,CAAC,IAAI,KAAA,CAAM,MAAC,CAAM,KAAC,CAAK,CAAC,GAAG,aAAA,GAAgB,MAAA,CAAO,KAAC,CAAK,CAAC;AAOjG,CAAC","file":"number-property.js","sourceRoot":"","sourcesContent":["\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n"]}