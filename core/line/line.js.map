{"version":3,"sources":["../../../../../src/lib/core/line/line.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,QAAQ,EACR,SAAS,EAIZ,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAA,mBAAE,EAAmB,MAAA,gCAAA,CAAA;AAC5B;;;;GAIG;AACH,MAGC;;AAA2B,iBAAA,GAAoC;IAFhE,EAGE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAFvB,QAAQ,EAGE,uBAAA;gBAFV,IAAI,EAGE;oBAFJ,kBAAkB,EAGE,MAAA;iBAFrB;aACF,EAGC,EAAG;CAFJ,CAGC;AAFF;;GAEG;AAEF,qBAAA,GAAA,MAAA,EAAA,CAAC;AAGF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;AACtB,CAAC;AAED;;;GAGG;AACH,MATC;IAUD;;;;OAIG;IACH,YAdsB,MAAyB,EAAU,SAAW,EAC9C,QAAU;QADV,WAAA,GAAA,MAAA,CAAyB;QAAU,cAAA,GAAA,SAAA,CAAW;QAC9C,aAAA,GAAA,QAAA,CAAU;QAgB5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IACH;;;OAGG;IAjBA,aAAA,CAAA,KAAA;QAmBC,IAAI,CAlBC,aAAC,EAAa,CAAE;QAmBrB,EAAE,CAAC,CAAC,KAlBC,KAAS,CAAA,IAAK,KAAA,KAAU,CAAA,CAAE,CAAC,CAAA;YAmB9B,IAAI,CAlBC,SAAC,CAAS,OAAC,KAAO,OAAK,EAAQ,IAAA,CAAK,CAAC;QAmB5C,CAAC;QAlBC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,GAAO,CAAA,CAAE,CAAC,CAAA;YAmBpB,IAAI,CAlBC,SAAC,CAAS,gBAAC,EAAiB,IAAA,CAAK,CAAC;QAmBzC,CAAC;IACH,CAAC;IACH;;OAEG;IAnBA,aAAA;QAqBC,IAAI,CApBC,SAAC,CAAS,YAAC,EAAa,KAAA,CAAM,CAAC;QAqBpC,IAAI,CApBC,SAAC,CAAS,YAAC,EAAa,KAAA,CAAM,CAAC;QASV,IAAA,CARrB,SAAC,CAAS,gBAAC,EAAiB,KAAA,CAAM,CAAC;IAqB1C,CAAC;IACH;;;;OAIG;IAvBA,SAAA,CAAA,SAAA,EAAA,IAAA;QAyBC,IAAI,CAxBC,SAAC,CAAS,eAAC,CAAe,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,SAAA,EAAW,IAAA,CAAK,CAAC;IAyB/E,CAAC;CAEF;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;IACjC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChC,CAAC;AAED,MAhCC;;AAAkC,uBAAA,GAAoC;IAiCvE,EAhCE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAiCtB,OAAO,EAhCE,CAAA,mBAAE,CAAmB;gBAiC9B,OAAO,EAhCE,CAAA,MAAE,EAAO,mBAAA,CAAoB;gBAiCtC,YAAY,EAhCE,CAAA,MAAE,CAAM;aAiCvB,EAhCC,EAAG;CAiCJ,CAhCC;AAiCF;;GAEG;AAjCF,2BAAA,GAAA,MAAA,EAmCA,CAAC;AAGF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;AAC5B,CAAC","file":"line.js","sourceRoot":"","sourcesContent":["import {\n    NgModule,\n    Directive,\n    Renderer,\n    ElementRef,\n    QueryList\n} from '@angular/core';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line]',\n  host: {\n    '[class.mat-line]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} bool\n * @return {?}\n */\nprivate _setClass(className: string, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, className, bool);\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdLine, CompatibilityModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}